{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\n/** @namespace API-PIT */\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst acceptedQuerystring = ['allow_partial_pit_creation', 'keep_alive', 'preference', 'routing', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  allowPartialPitCreation: 'allow_partial_pit_creation',\n  keepAlive: 'keep_alive',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\n/**\n * Creates a point in time.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/opensearch/point-in-time-api#create-a-pit|Opensearch - Create a PIT}\n * @memberOf API-PIT\n *\n * @param {Object} params\n * @param {string} params.index - The name(s) of the target index(es) for the PIT. May contain a comma-separated list or a wildcard index pattern.\n * @param {string} params.keep_alive - The amount of time to keep the PIT\n * @param {string} [params.preference=random] - The node or the shard used to perform the search.\n * @param {string} [params.routing] - Specifies to route search requests to a specific shard.\n * @param {string} [params.expand_wildcards=open] - The type of index that can match the wildcard pattern. Supports comma-separated values.\n * @param {string} [params.allow_partial_pit_creation=false] - Specifies whether to create a PIT with partial failures.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/opensearch/point-in-time-api#sample-response|Create PIT Response}\n */\n\nfunction createPitApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params['index'] == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n  if (params['keep_alive'] == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: keep_alive');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + encodeURIComponent(index) + '/' + '_search' + '/' + 'point_in_time';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\nmodule.exports = createPitApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","allowPartialPitCreation","keepAlive","errorTrace","filterPath","createPitApi","params","options","callback","err","method","body","index","querystring","path","encodeURIComponent","request","transport","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/create_pit.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\n/** @namespace API-PIT */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils');\nconst acceptedQuerystring = [\n  'allow_partial_pit_creation',\n  'keep_alive',\n  'preference',\n  'routing',\n  'pretty',\n  'human',\n  'error_trace',\n  'source',\n  'filter_path',\n];\nconst snakeCase = {\n  allowPartialPitCreation: 'allow_partial_pit_creation',\n  keepAlive: 'keep_alive',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n};\n\n/**\n * Creates a point in time.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/opensearch/point-in-time-api#create-a-pit|Opensearch - Create a PIT}\n * @memberOf API-PIT\n *\n * @param {Object} params\n * @param {string} params.index - The name(s) of the target index(es) for the PIT. May contain a comma-separated list or a wildcard index pattern.\n * @param {string} params.keep_alive - The amount of time to keep the PIT\n * @param {string} [params.preference=random] - The node or the shard used to perform the search.\n * @param {string} [params.routing] - Specifies to route search requests to a specific shard.\n * @param {string} [params.expand_wildcards=open] - The type of index that can match the wildcard pattern. Supports comma-separated values.\n * @param {string} [params.allow_partial_pit_creation=false] - Specifies whether to create a PIT with partial failures.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/opensearch/point-in-time-api#sample-response|Create PIT Response}\n */\n\nfunction createPitApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params['index'] == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  if (params['keep_alive'] == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: keep_alive');\n    return handleError(err, callback);\n  }\n\n  let { method, body, index, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + encodeURIComponent(index) + '/' + '_search' + '/' + 'point_in_time';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = createPitApi;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;;AAEA;AAEA,MAAM;EAAEA,WAAW;EAAEC,aAAa;EAAEC,kBAAkB;EAAEC;AAAoB,CAAC,GAAGC,OAAO,CAAC,UAAU,CAAC;AACnG,MAAMC,mBAAmB,GAAG,CAC1B,4BAA4B,EAC5B,YAAY,EACZ,YAAY,EACZ,SAAS,EACT,QAAQ,EACR,OAAO,EACP,aAAa,EACb,QAAQ,EACR,aAAa,CACd;AACD,MAAMC,SAAS,GAAG;EAChBC,uBAAuB,EAAE,4BAA4B;EACrDC,SAAS,EAAE,YAAY;EACvBC,UAAU,EAAE,aAAa;EACzBC,UAAU,EAAE;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,YAAYA,CAACC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EAC/C,CAACF,MAAM,EAAEC,OAAO,EAAEC,QAAQ,CAAC,GAAGZ,kBAAkB,CAACU,MAAM,EAAEC,OAAO,EAAEC,QAAQ,CAAC;;EAE3E;EACA,IAAIF,MAAM,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE;IAC3B,MAAMG,GAAG,GAAG,IAAI,IAAI,CAACZ,mBAAmB,CAAC,CAAC,mCAAmC,CAAC;IAC9E,OAAOH,WAAW,CAACe,GAAG,EAAED,QAAQ,CAAC;EACnC;EAEA,IAAIF,MAAM,CAAC,YAAY,CAAC,IAAI,IAAI,EAAE;IAChC,MAAMG,GAAG,GAAG,IAAI,IAAI,CAACZ,mBAAmB,CAAC,CAAC,wCAAwC,CAAC;IACnF,OAAOH,WAAW,CAACe,GAAG,EAAED,QAAQ,CAAC;EACnC;EAEA,IAAI;IAAEE,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAE,GAAGC;EAAY,CAAC,GAAGP,MAAM;EACpDO,WAAW,GAAGlB,aAAa,CAACI,mBAAmB,EAAEC,SAAS,EAAEa,WAAW,CAAC;EAExE,IAAIC,IAAI,GAAG,EAAE;EACb,IAAIJ,MAAM,IAAI,IAAI,EAAEA,MAAM,GAAG,MAAM;EACnCI,IAAI,GAAG,GAAG,GAAGC,kBAAkB,CAACH,KAAK,CAAC,GAAG,GAAG,GAAG,SAAS,GAAG,GAAG,GAAG,eAAe;;EAEhF;EACA,MAAMI,OAAO,GAAG;IACdN,MAAM;IACNI,IAAI;IACJH,IAAI,EAAEA,IAAI,IAAI,EAAE;IAChBE;EACF,CAAC;EAED,OAAO,IAAI,CAACI,SAAS,CAACD,OAAO,CAACA,OAAO,EAAET,OAAO,EAAEC,QAAQ,CAAC;AAC3D;AAEAU,MAAM,CAACC,OAAO,GAAGd,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}