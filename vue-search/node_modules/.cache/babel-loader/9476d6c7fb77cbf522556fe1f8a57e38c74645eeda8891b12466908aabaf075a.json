{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst acceptedQuerystring = ['analyzer', 'analyze_wildcard', 'default_operator', 'df', 'from', 'ignore_unavailable', 'allow_no_indices', 'conflicts', 'expand_wildcards', 'lenient', 'pipeline', 'preference', 'q', 'routing', 'scroll', 'search_type', 'search_timeout', 'size', 'max_docs', 'sort', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'terminate_after', 'stats', 'version', 'version_type', 'request_cache', 'refresh', 'timeout', 'wait_for_active_shards', 'scroll_size', 'wait_for_completion', 'requests_per_second', 'slices', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  analyzeWildcard: 'analyze_wildcard',\n  defaultOperator: 'default_operator',\n  ignoreUnavailable: 'ignore_unavailable',\n  allowNoIndices: 'allow_no_indices',\n  expandWildcards: 'expand_wildcards',\n  searchType: 'search_type',\n  searchTimeout: 'search_timeout',\n  maxDocs: 'max_docs',\n  _sourceExcludes: '_source_excludes',\n  _sourceExclude: '_source_exclude',\n  _sourceIncludes: '_source_includes',\n  _sourceInclude: '_source_include',\n  terminateAfter: 'terminate_after',\n  versionType: 'version_type',\n  requestCache: 'request_cache',\n  waitForActiveShards: 'wait_for_active_shards',\n  scrollSize: 'scroll_size',\n  waitForCompletion: 'wait_for_completion',\n  requestsPerSecond: 'requests_per_second',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\n/**\n * Run a script to update all documents that match the query.\n * <br/> See Also: {@link https://opensearch.org/docs/2.4/api-reference/document-apis/update-by-query/ OpenSearch - Update by query}\n *\n * @memberOf API-Document\n *\n * @param {Object} params\n * @param {string} params.index - A comma-separated list of index names to search; use '_all' or empty string to perform the operation on all indices\n * @param {Object} [params.body] - The search definition using the Query DSL\n * @param {string} [params.analyzer] - The analyzer to use for the query string\n * @param {boolean} [params.analyze_wildcard=false] - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {string} [params.default_operator=OR] - The default operator for query string query (options: AND, OR)\n * @param {string} [params.df] - The field to use as default where no field prefix is given in the query string\n * @param {number} [params.from=0] - Starting offset\n * @param {boolean} [params.ignore_unavailable=false] - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {boolean} [params.allow_no_indices=true] - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes '_all' string or when no indices have been specified)\n * @param {string} [params.conflicts=abort] - What to do when the update by query hits version conflicts? (options: abort, proceed)\n * @param {string} [params.expand_wildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both. (options: open, closed, hidden, none, all)\n * @param {boolean} [params.lenient=false] - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {string} [params.pipeline] - Ingest pipeline to set on index requests made by this action. (default: none)\n * @param {string} [params.preference] - Specify the node or shard the operation should be performed on (default: random)\n * @param {string} [params.q] - Query in the Lucene query string syntax\n * @param {string} [params.routing] - A comma-separated list of specific routing values\n * @param {string} [params.scroll] - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {string} [params.search_type=query_then_fetch] - Search operation type (options: query_then_fetch, dfs_query_then_fetch)\n * @param {string} [params.search_timeout] - Explicit timeout for each search request. Defaults to no timeout.\n * @param {number} [params.size] - Deprecated, please use 'max_docs' instead\n * @param {number} [params.max_docs] - Maximum number of documents to process (default: all documents)\n * @param {string} [params.sort] - A comma-separated list of <field>:<direction> pairs\n * @param {string} [params._source] - True or false to return the _source field or not, or a list of fields to return\n * @param {string} [params._source_excludes] - A list of fields to exclude from the returned _source field\n * @param {string} [params._source_includes] - A list of fields to extract and return from the _source field\n * @param {number} [params.terminate_after] - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {string} [params.stats] - Specific 'tag' of the request for logging and statistical purposes\n * @param {boolean} [params.version] - Specify whether to return document version as part of a hit\n * @param {boolean} [params.version_type] - Should the document increment the version number (internal) on hit or not (reindex)\n * @param {boolean} [params.request_cache] - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {boolean} [params.refresh=false] - Should the affected indexes be refreshed?\n * @param {string} [params.timeout] - Time each individual bulk request should wait for shards that are unavailable.\n * @param {string} [params.wait_for_active_shards=1] - Sets the number of shard copies that must be active before proceeding with the update by query operation. 1 means the primary shard only. Set to 'all' for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {number} [params.scroll_size=1000] - Size on the scroll request powering the update by query\n * @param {boolean} [params.wait_for_completion=true] - Should the request should block until the update by query operation is complete.\n * @param {number} [params.requests_per_second=-1] - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n * @param {string} [params.slices=1] - The number of slices this task should be divided into. 1 means the task isn't sliced into subtasks. Can be set to 'auto'.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/2.4/api-reference/document-apis/update-by-query/#response Update by query Response}\n */\nfunction updateByQueryApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (params.type != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (index != null && type != null) {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_update_by_query';\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_update_by_query';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\nmodule.exports = updateByQueryApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","analyzeWildcard","defaultOperator","ignoreUnavailable","allowNoIndices","expandWildcards","searchType","searchTimeout","maxDocs","_sourceExcludes","_sourceExclude","_sourceIncludes","_sourceInclude","terminateAfter","versionType","requestCache","waitForActiveShards","scrollSize","waitForCompletion","requestsPerSecond","errorTrace","filterPath","updateByQueryApi","params","options","callback","index","err","type","method","body","querystring","path","encodeURIComponent","request","transport","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/update_by_query.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils');\nconst acceptedQuerystring = [\n  'analyzer',\n  'analyze_wildcard',\n  'default_operator',\n  'df',\n  'from',\n  'ignore_unavailable',\n  'allow_no_indices',\n  'conflicts',\n  'expand_wildcards',\n  'lenient',\n  'pipeline',\n  'preference',\n  'q',\n  'routing',\n  'scroll',\n  'search_type',\n  'search_timeout',\n  'size',\n  'max_docs',\n  'sort',\n  '_source',\n  '_source_excludes',\n  '_source_exclude',\n  '_source_includes',\n  '_source_include',\n  'terminate_after',\n  'stats',\n  'version',\n  'version_type',\n  'request_cache',\n  'refresh',\n  'timeout',\n  'wait_for_active_shards',\n  'scroll_size',\n  'wait_for_completion',\n  'requests_per_second',\n  'slices',\n  'pretty',\n  'human',\n  'error_trace',\n  'source',\n  'filter_path',\n];\nconst snakeCase = {\n  analyzeWildcard: 'analyze_wildcard',\n  defaultOperator: 'default_operator',\n  ignoreUnavailable: 'ignore_unavailable',\n  allowNoIndices: 'allow_no_indices',\n  expandWildcards: 'expand_wildcards',\n  searchType: 'search_type',\n  searchTimeout: 'search_timeout',\n  maxDocs: 'max_docs',\n  _sourceExcludes: '_source_excludes',\n  _sourceExclude: '_source_exclude',\n  _sourceIncludes: '_source_includes',\n  _sourceInclude: '_source_include',\n  terminateAfter: 'terminate_after',\n  versionType: 'version_type',\n  requestCache: 'request_cache',\n  waitForActiveShards: 'wait_for_active_shards',\n  scrollSize: 'scroll_size',\n  waitForCompletion: 'wait_for_completion',\n  requestsPerSecond: 'requests_per_second',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n};\n\n/**\n * Run a script to update all documents that match the query.\n * <br/> See Also: {@link https://opensearch.org/docs/2.4/api-reference/document-apis/update-by-query/ OpenSearch - Update by query}\n *\n * @memberOf API-Document\n *\n * @param {Object} params\n * @param {string} params.index - A comma-separated list of index names to search; use '_all' or empty string to perform the operation on all indices\n * @param {Object} [params.body] - The search definition using the Query DSL\n * @param {string} [params.analyzer] - The analyzer to use for the query string\n * @param {boolean} [params.analyze_wildcard=false] - Specify whether wildcard and prefix queries should be analyzed (default: false)\n * @param {string} [params.default_operator=OR] - The default operator for query string query (options: AND, OR)\n * @param {string} [params.df] - The field to use as default where no field prefix is given in the query string\n * @param {number} [params.from=0] - Starting offset\n * @param {boolean} [params.ignore_unavailable=false] - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {boolean} [params.allow_no_indices=true] - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes '_all' string or when no indices have been specified)\n * @param {string} [params.conflicts=abort] - What to do when the update by query hits version conflicts? (options: abort, proceed)\n * @param {string} [params.expand_wildcards=open] - Whether to expand wildcard expression to concrete indices that are open, closed or both. (options: open, closed, hidden, none, all)\n * @param {boolean} [params.lenient=false] - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {string} [params.pipeline] - Ingest pipeline to set on index requests made by this action. (default: none)\n * @param {string} [params.preference] - Specify the node or shard the operation should be performed on (default: random)\n * @param {string} [params.q] - Query in the Lucene query string syntax\n * @param {string} [params.routing] - A comma-separated list of specific routing values\n * @param {string} [params.scroll] - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {string} [params.search_type=query_then_fetch] - Search operation type (options: query_then_fetch, dfs_query_then_fetch)\n * @param {string} [params.search_timeout] - Explicit timeout for each search request. Defaults to no timeout.\n * @param {number} [params.size] - Deprecated, please use 'max_docs' instead\n * @param {number} [params.max_docs] - Maximum number of documents to process (default: all documents)\n * @param {string} [params.sort] - A comma-separated list of <field>:<direction> pairs\n * @param {string} [params._source] - True or false to return the _source field or not, or a list of fields to return\n * @param {string} [params._source_excludes] - A list of fields to exclude from the returned _source field\n * @param {string} [params._source_includes] - A list of fields to extract and return from the _source field\n * @param {number} [params.terminate_after] - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n * @param {string} [params.stats] - Specific 'tag' of the request for logging and statistical purposes\n * @param {boolean} [params.version] - Specify whether to return document version as part of a hit\n * @param {boolean} [params.version_type] - Should the document increment the version number (internal) on hit or not (reindex)\n * @param {boolean} [params.request_cache] - Specify if request cache should be used for this request or not, defaults to index level setting\n * @param {boolean} [params.refresh=false] - Should the affected indexes be refreshed?\n * @param {string} [params.timeout] - Time each individual bulk request should wait for shards that are unavailable.\n * @param {string} [params.wait_for_active_shards=1] - Sets the number of shard copies that must be active before proceeding with the update by query operation. 1 means the primary shard only. Set to 'all' for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {number} [params.scroll_size=1000] - Size on the scroll request powering the update by query\n * @param {boolean} [params.wait_for_completion=true] - Should the request should block until the update by query operation is complete.\n * @param {number} [params.requests_per_second=-1] - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n * @param {string} [params.slices=1] - The number of slices this task should be divided into. 1 means the task isn't sliced into subtasks. Can be set to 'auto'.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/2.4/api-reference/document-apis/update-by-query/#response Update by query Response}\n */\nfunction updateByQueryApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (params.type != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let { method, body, index, type, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (index != null && type != null) {\n    if (method == null) method = 'POST';\n    path =\n      '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_update_by_query';\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_update_by_query';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = updateByQueryApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}