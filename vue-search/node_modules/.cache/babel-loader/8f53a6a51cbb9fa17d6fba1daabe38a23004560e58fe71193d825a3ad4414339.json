{"ast":null,"code":"import '@/assets/css/index.css';\nimport axios from 'axios';\nexport default {\n  name: \"SearchMain\",\n  components: {},\n  data() {\n    return {\n      searchQuery: '',\n      // 검색어\n      synonyms: [] // 동의어\n    };\n  },\n  methods: {\n    async fetchSynonyms() {\n      let query = this.searchQuery.trim();\n\n      // 네이버 맞춤법 검사기 API 호출\n      if (query.length > 0) {\n        try {\n          const correctionResponse = await axios.get('/api/v1/search/errata', {\n            headers: {\n              'X-Naver-Client-Id': 'HMfqGNJy1U9czwPDacct',\n              'X-Naver-Client-Secret': 'ncUkkRXeUU',\n              'Content-Type': 'plain/text'\n            },\n            params: {\n              query\n            }\n          });\n          if (correctionResponse.data && correctionResponse.data.errata && correctionResponse.data.errata.length > 0) {\n            query = correctionResponse.data.errata[0].corrected || query;\n          } else {\n            console.warn('No correction data found:', correctionResponse.data);\n          }\n        } catch (error) {\n          console.error('Error correcting query:', error);\n        }\n      }\n\n      // 교정된 검색어로 네이버 검색 API 호출\n      if (query.length > 0) {\n        try {\n          const response = await axios.get(`/api/v1/search/encyc.json`, {\n            params: {\n              query\n            },\n            headers: {\n              'X-Naver-Client-Id': 'HMfqGNJy1U9czwPDacct',\n              'X-Naver-Client-Secret': 'ncUkkRXeUU'\n            }\n          });\n          if (response.data && response.data.items) {\n            this.synonyms = response.data.items.slice(0, 1).map(item => this.stripHtmlTags(item.title));\n          } else {\n            console.warn('No items found in response:', response.data);\n            this.synonyms = [];\n          }\n        } catch (error) {\n          console.error('Error fetching synonyms:', error);\n          this.synonyms = [];\n        }\n      } else {\n        this.synonyms = [];\n      }\n\n      // axios\n      axios({\n        method: 'get',\n        //put,post,delete\n        url: 'search-amazon-opensearch-hnkbsyqioeqlcw4hwvtmb633ba.ap-northeast-2.es.amazonaws.com:443',\n        headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\"\n        },\n        //전송타입\n        params: {\n          query: query\n        },\n        responseType: 'json' //수신타입\n      }).then(response => {\n        console.log(response.data); //수신데이타\n        console.log(response.data.apiData); //수신데이타\n        this.orderedList = response.data.apiData;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    stripHtmlTags(str) {\n      return str.replace(/<\\/?[^>]+>/gi, \"\");\n    }\n  }\n};","map":{"version":3,"names":["axios","name","components","data","searchQuery","synonyms","methods","fetchSynonyms","query","trim","length","correctionResponse","get","headers","params","errata","corrected","console","warn","error","response","items","slice","map","item","stripHtmlTags","title","method","url","responseType","then","log","apiData","orderedList","catch","str","replace"],"sources":["C:\\search\\vue-search\\src\\views\\SearchMain.vue"],"sourcesContent":["<template>\r\n    <div class=\"wrap\">\r\n        <!-- 헤더 -->\r\n        <header class=\"header\">\r\n            <div class=\"headerName\">Open<br>Search</div>\r\n            <div class=\"search-container\">\r\n                <input type=\"search\" placeholder=\"검색어입력\" v-model=\"searchQuery\" @input=\"fetchSynonyms\">\r\n            </div>\r\n        </header>\r\n\r\n        <!-- 내용 -->\r\n\r\n        <body>\r\n            <div class=\"content\">\r\n                <div class=\"context\">\r\n                    검색어 : {{ searchQuery }}\r\n                    <p v-if=\"synonyms.length\">동의어 제안: {{ synonyms.join(',') }}</p>\r\n                    <div v-if=\"synonyms.length\">\r\n                        <p>검색결과 :</p>\r\n                        <ul>\r\n                            <li v-for=\"synonym in synonyms\" :key=\"synonym\">{{ synonym }}</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div v-else>\r\n                        <p>결과가 없습니다.</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </body>\r\n\r\n    </div>\r\n</template>\r\n<script>\r\nimport '@/assets/css/index.css'\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    name: \"SearchMain\",\r\n    components: {},\r\n    data() {\r\n        return {\r\n            searchQuery: '', // 검색어\r\n            synonyms: [],   // 동의어\r\n        };\r\n    },\r\n    methods: {\r\n        async fetchSynonyms() {\r\n            let query = this.searchQuery.trim();\r\n\r\n            // 네이버 맞춤법 검사기 API 호출\r\n            if (query.length > 0) {\r\n                try {\r\n                    const correctionResponse = await axios.get('/api/v1/search/errata', {\r\n                        headers: {\r\n                            'X-Naver-Client-Id': 'HMfqGNJy1U9czwPDacct',\r\n                            'X-Naver-Client-Secret': 'ncUkkRXeUU',\r\n                            'Content-Type': 'plain/text'\r\n                        },\r\n                        params: { query }\r\n                    });\r\n\r\n                    if (correctionResponse.data && correctionResponse.data.errata && correctionResponse.data.errata.length > 0) {\r\n                        query = correctionResponse.data.errata[0].corrected || query;\r\n                    } else {\r\n                        console.warn('No correction data found:', correctionResponse.data);\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error correcting query:', error);\r\n                }\r\n            }\r\n\r\n            // 교정된 검색어로 네이버 검색 API 호출\r\n            if (query.length > 0) {\r\n                try {\r\n                    const response = await axios.get(`/api/v1/search/encyc.json`, {\r\n                        params: { query },\r\n                        headers: {\r\n                            'X-Naver-Client-Id': 'HMfqGNJy1U9czwPDacct',\r\n                            'X-Naver-Client-Secret': 'ncUkkRXeUU'\r\n                        }\r\n                    });\r\n\r\n                    if (response.data && response.data.items) {\r\n                        this.synonyms = response.data.items.slice(0, 1).map(item => this.stripHtmlTags(item.title));\r\n                    } else {\r\n                        console.warn('No items found in response:', response.data);\r\n                        this.synonyms = [];\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error fetching synonyms:', error);\r\n                    this.synonyms = [];\r\n                }\r\n            } else {\r\n                this.synonyms = [];\r\n            }\r\n\r\n\r\n            // axios\r\n            axios({\r\n                method: 'get',  //put,post,delete\r\n                url: 'search-amazon-opensearch-hnkbsyqioeqlcw4hwvtmb633ba.ap-northeast-2.es.amazonaws.com:443',\r\n                headers: { \"Content-Type\": \"application/json; charset=utf-8\" }, //전송타입\r\n                params: { query: query }, \r\n\r\n                responseType: 'json' //수신타입\r\n            }).then(response => {\r\n                console.log(response.data); //수신데이타\r\n                console.log(response.data.apiData); //수신데이타\r\n                this.orderedList = response.data.apiData;\r\n\r\n            }).catch(error => {\r\n                console.log(error);\r\n            });\r\n\r\n        },\r\n        stripHtmlTags(str) {\r\n            return str.replace(/<\\/?[^>]+>/gi, \"\");\r\n        }\r\n    }\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}