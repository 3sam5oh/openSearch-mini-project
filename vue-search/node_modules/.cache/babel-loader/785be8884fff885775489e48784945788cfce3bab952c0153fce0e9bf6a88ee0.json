{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\n/** @namespace API-Count */\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst acceptedQuerystring = ['ignore_unavailable', 'ignore_throttled', 'allow_no_indices', 'expand_wildcards', 'min_score', 'preference', 'routing', 'q', 'analyzer', 'analyze_wildcard', 'default_operator', 'df', 'lenient', 'terminate_after', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  ignoreUnavailable: 'ignore_unavailable',\n  ignoreThrottled: 'ignore_throttled',\n  allowNoIndices: 'allow_no_indices',\n  expandWildcards: 'expand_wildcards',\n  minScore: 'min_score',\n  analyzeWildcard: 'analyze_wildcard',\n  defaultOperator: 'default_operator',\n  terminateAfter: 'terminate_after',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\n/**\n * The count API gives you quick access to the number of documents that match a query. You can also use it to check the document count of an index, data stream, or cluster.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/count/ OpenSearch - Bulk}\n *\n * @memberOf API-Count\n *\n * @param {Object} params\n * @param {boolean} [params.allow_no_indices=false] - If false, the request returns an error if any wildcard expression or index alias targets any closed or missing indices.\n * @param {string} [params.analyzer] - The analyzer to use in the query string.\n * @param {boolean} [params.analyze_wildcard=false] - Specifies whether to analyze wildcard and prefix queries.\n * @param {string} [params.default_operator='OR'] - Indicates whether the default operator for a string query should be 'AND' or 'OR'.\n * @param {string} [params.df] - The default field in case a field prefix is not provided in the query string.\n * @param {string} [params.expand_wildcards=open] - Expands wildcard expressions to concrete indices. Combine multiple values with commas. Supported values are 'all', 'open', 'closed', 'hidden', and 'none'.\n * @param {boolean} [params.ignore_unavailable=false] - Specifies whether to include missing or closed indices in the response.\n * @param {boolean} [params.lenient=false] - Specifies whether OpenSearch should accept requests if queries have format errors (for example, querying a text field for an integer).\n * @param {number} [params.min_score] - Include only documents with a minimum '_score' value in the result.\n * @param {string} [params.routing] - Value used to route the operation to a specific shard.\n * @param {string} [params.preference] - Specifies which shard or node OpenSearch should perform the count operation on.\n * @param {number} [params.terminate_after] - The maximum number of documents OpenSearch should process before terminating the request.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/count/#response Count Response}\n */\n\nfunction countApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required url components\n  if (params.type != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (index != null && type != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_count';\n  } else if (index != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_count';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_count';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\nmodule.exports = countApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","ignoreUnavailable","ignoreThrottled","allowNoIndices","expandWildcards","minScore","analyzeWildcard","defaultOperator","terminateAfter","errorTrace","filterPath","countApi","params","options","callback","type","index","err","method","body","querystring","path","encodeURIComponent","request","transport","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/count.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\n/** @namespace API-Count */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils');\nconst acceptedQuerystring = [\n  'ignore_unavailable',\n  'ignore_throttled',\n  'allow_no_indices',\n  'expand_wildcards',\n  'min_score',\n  'preference',\n  'routing',\n  'q',\n  'analyzer',\n  'analyze_wildcard',\n  'default_operator',\n  'df',\n  'lenient',\n  'terminate_after',\n  'pretty',\n  'human',\n  'error_trace',\n  'source',\n  'filter_path',\n];\nconst snakeCase = {\n  ignoreUnavailable: 'ignore_unavailable',\n  ignoreThrottled: 'ignore_throttled',\n  allowNoIndices: 'allow_no_indices',\n  expandWildcards: 'expand_wildcards',\n  minScore: 'min_score',\n  analyzeWildcard: 'analyze_wildcard',\n  defaultOperator: 'default_operator',\n  terminateAfter: 'terminate_after',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n};\n\n/**\n * The count API gives you quick access to the number of documents that match a query. You can also use it to check the document count of an index, data stream, or cluster.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/count/ OpenSearch - Bulk}\n *\n * @memberOf API-Count\n *\n * @param {Object} params\n * @param {boolean} [params.allow_no_indices=false] - If false, the request returns an error if any wildcard expression or index alias targets any closed or missing indices.\n * @param {string} [params.analyzer] - The analyzer to use in the query string.\n * @param {boolean} [params.analyze_wildcard=false] - Specifies whether to analyze wildcard and prefix queries.\n * @param {string} [params.default_operator='OR'] - Indicates whether the default operator for a string query should be 'AND' or 'OR'.\n * @param {string} [params.df] - The default field in case a field prefix is not provided in the query string.\n * @param {string} [params.expand_wildcards=open] - Expands wildcard expressions to concrete indices. Combine multiple values with commas. Supported values are 'all', 'open', 'closed', 'hidden', and 'none'.\n * @param {boolean} [params.ignore_unavailable=false] - Specifies whether to include missing or closed indices in the response.\n * @param {boolean} [params.lenient=false] - Specifies whether OpenSearch should accept requests if queries have format errors (for example, querying a text field for an integer).\n * @param {number} [params.min_score] - Include only documents with a minimum '_score' value in the result.\n * @param {string} [params.routing] - Value used to route the operation to a specific shard.\n * @param {string} [params.preference] - Specifies which shard or node OpenSearch should perform the count operation on.\n * @param {number} [params.terminate_after] - The maximum number of documents OpenSearch should process before terminating the request.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/count/#response Count Response}\n */\n\nfunction countApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required url components\n  if (params.type != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let { method, body, index, type, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (index != null && type != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_count';\n  } else if (index != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_count';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_count';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = countApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}