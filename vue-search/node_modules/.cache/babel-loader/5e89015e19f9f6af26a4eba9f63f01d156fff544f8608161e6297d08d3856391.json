{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\n/**\n * Allows to use the Mustache language to pre-render a search definition.\n *\n * @memberOf API-Search\n *\n * @param {Object} params\n * @param {string} [params.id] - The id of the stored search template\n * @param {Object} [params.body] - The search definition template and its params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nfunction renderSearchTemplateApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (id != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_render' + '/' + 'template' + '/' + encodeURIComponent(id);\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_render' + '/' + 'template';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\nmodule.exports = renderSearchTemplateApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","errorTrace","filterPath","renderSearchTemplateApi","params","options","callback","method","body","id","querystring","path","encodeURIComponent","request","transport","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/render_search_template.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils');\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' };\n\n/**\n * Allows to use the Mustache language to pre-render a search definition.\n *\n * @memberOf API-Search\n *\n * @param {Object} params\n * @param {string} [params.id] - The id of the stored search template\n * @param {Object} [params.body] - The search definition template and its params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nfunction renderSearchTemplateApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, id, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (id != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_render' + '/' + 'template' + '/' + encodeURIComponent(id);\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_render' + '/' + 'template';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = renderSearchTemplateApi;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AAEA,MAAM;EAAEA,WAAW;EAAEC,aAAa;EAAEC,kBAAkB;EAAEC;AAAoB,CAAC,GAAGC,OAAO,CAAC,UAAU,CAAC;AACnG,MAAMC,mBAAmB,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,aAAa,CAAC;AACvF,MAAMC,SAAS,GAAG;EAAEC,UAAU,EAAE,aAAa;EAAEC,UAAU,EAAE;AAAc,CAAC;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAACC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EAC1D,CAACF,MAAM,EAAEC,OAAO,EAAEC,QAAQ,CAAC,GAAGV,kBAAkB,CAACQ,MAAM,EAAEC,OAAO,EAAEC,QAAQ,CAAC;EAE3E,IAAI;IAAEC,MAAM;IAAEC,IAAI;IAAEC,EAAE;IAAE,GAAGC;EAAY,CAAC,GAAGN,MAAM;EACjDM,WAAW,GAAGf,aAAa,CAACI,mBAAmB,EAAEC,SAAS,EAAEU,WAAW,CAAC;EAExE,IAAIC,IAAI,GAAG,EAAE;EACb,IAAIF,EAAE,IAAI,IAAI,EAAE;IACd,IAAIF,MAAM,IAAI,IAAI,EAAEA,MAAM,GAAGC,IAAI,IAAI,IAAI,GAAG,KAAK,GAAG,MAAM;IAC1DG,IAAI,GAAG,GAAG,GAAG,SAAS,GAAG,GAAG,GAAG,UAAU,GAAG,GAAG,GAAGC,kBAAkB,CAACH,EAAE,CAAC;EAC1E,CAAC,MAAM;IACL,IAAIF,MAAM,IAAI,IAAI,EAAEA,MAAM,GAAGC,IAAI,IAAI,IAAI,GAAG,KAAK,GAAG,MAAM;IAC1DG,IAAI,GAAG,GAAG,GAAG,SAAS,GAAG,GAAG,GAAG,UAAU;EAC3C;;EAEA;EACA,MAAME,OAAO,GAAG;IACdN,MAAM;IACNI,IAAI;IACJH,IAAI,EAAEA,IAAI,IAAI,EAAE;IAChBE;EACF,CAAC;EAED,OAAO,IAAI,CAACI,SAAS,CAACD,OAAO,CAACA,OAAO,EAAER,OAAO,EAAEC,QAAQ,CAAC;AAC3D;AAEAS,MAAM,CAACC,OAAO,GAAGb,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}