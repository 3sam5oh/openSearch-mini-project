{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst acceptedQuerystring = ['refresh', 'timeout', 'wait_for_active_shards', 'wait_for_completion', 'requests_per_second', 'scroll', 'slices', 'max_docs', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  waitForActiveShards: 'wait_for_active_shards',\n  waitForCompletion: 'wait_for_completion',\n  requestsPerSecond: 'requests_per_second',\n  maxDocs: 'max_docs',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\n/**\n * Copy all or a subset of your data from a source index into a destination index.\n * <br/> See Also: {@link https://opensearch.org/docs/2.4/api-reference/document-apis/reindex/ OpenSearch - Reindex Document}\n *\n * @memberOf API-Document\n *\n * @param {Object} params\n * @param {Object} params.body The search definition using the Query DSL and the prototype for the index request.\n * @param {boolean} [params.refresh=false] Should the affected indexes be refreshed?\n * @param {string} [params.timeout=30s] Time each individual bulk request should wait for shards that are unavailable.\n * @param {string} [params.wait_for_active_shards] Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {boolean} [params.wait_for_completion=false] Should the request should block until the reindex is complete.\n * @param {number} [params.requests_per_second=-1] The throttle to set on this request in sub-requests per second. -1 means no throttle.\n * @param {string} [params.scroll=5m] Control how long to keep the search context alive\n * @param {number|string} [params.slices=1] The number of slices this task should be divided into. 1 means the task isn't sliced into subtasks. Can be set to `auto`.\n * @param {number} [params.max_docs] Maximum number of documents to process (default: all documents)\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/2.4/api-reference/document-apis/reindex/#response Reindex Document Response}\n */\nfunction reindexApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_reindex';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\nmodule.exports = reindexApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","waitForActiveShards","waitForCompletion","requestsPerSecond","maxDocs","errorTrace","filterPath","reindexApi","params","options","callback","body","err","method","querystring","path","request","transport","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/reindex.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils');\nconst acceptedQuerystring = [\n  'refresh',\n  'timeout',\n  'wait_for_active_shards',\n  'wait_for_completion',\n  'requests_per_second',\n  'scroll',\n  'slices',\n  'max_docs',\n  'pretty',\n  'human',\n  'error_trace',\n  'source',\n  'filter_path',\n];\nconst snakeCase = {\n  waitForActiveShards: 'wait_for_active_shards',\n  waitForCompletion: 'wait_for_completion',\n  requestsPerSecond: 'requests_per_second',\n  maxDocs: 'max_docs',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n};\n\n/**\n * Copy all or a subset of your data from a source index into a destination index.\n * <br/> See Also: {@link https://opensearch.org/docs/2.4/api-reference/document-apis/reindex/ OpenSearch - Reindex Document}\n *\n * @memberOf API-Document\n *\n * @param {Object} params\n * @param {Object} params.body The search definition using the Query DSL and the prototype for the index request.\n * @param {boolean} [params.refresh=false] Should the affected indexes be refreshed?\n * @param {string} [params.timeout=30s] Time each individual bulk request should wait for shards that are unavailable.\n * @param {string} [params.wait_for_active_shards] Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n * @param {boolean} [params.wait_for_completion=false] Should the request should block until the reindex is complete.\n * @param {number} [params.requests_per_second=-1] The throttle to set on this request in sub-requests per second. -1 means no throttle.\n * @param {string} [params.scroll=5m] Control how long to keep the search context alive\n * @param {number|string} [params.slices=1] The number of slices this task should be divided into. 1 means the task isn't sliced into subtasks. Can be set to `auto`.\n * @param {number} [params.max_docs] Maximum number of documents to process (default: all documents)\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/2.4/api-reference/document-apis/reindex/#response Reindex Document Response}\n */\nfunction reindexApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_reindex';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = reindexApi;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AAEA,MAAM;EAAEA,WAAW;EAAEC,aAAa;EAAEC,kBAAkB;EAAEC;AAAoB,CAAC,GAAGC,OAAO,CAAC,UAAU,CAAC;AACnG,MAAMC,mBAAmB,GAAG,CAC1B,SAAS,EACT,SAAS,EACT,wBAAwB,EACxB,qBAAqB,EACrB,qBAAqB,EACrB,QAAQ,EACR,QAAQ,EACR,UAAU,EACV,QAAQ,EACR,OAAO,EACP,aAAa,EACb,QAAQ,EACR,aAAa,CACd;AACD,MAAMC,SAAS,GAAG;EAChBC,mBAAmB,EAAE,wBAAwB;EAC7CC,iBAAiB,EAAE,qBAAqB;EACxCC,iBAAiB,EAAE,qBAAqB;EACxCC,OAAO,EAAE,UAAU;EACnBC,UAAU,EAAE,aAAa;EACzBC,UAAU,EAAE;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAACC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EAC7C,CAACF,MAAM,EAAEC,OAAO,EAAEC,QAAQ,CAAC,GAAGd,kBAAkB,CAACY,MAAM,EAAEC,OAAO,EAAEC,QAAQ,CAAC;;EAE3E;EACA,IAAIF,MAAM,CAACG,IAAI,IAAI,IAAI,EAAE;IACvB,MAAMC,GAAG,GAAG,IAAI,IAAI,CAACf,mBAAmB,CAAC,CAAC,kCAAkC,CAAC;IAC7E,OAAOH,WAAW,CAACkB,GAAG,EAAEF,QAAQ,CAAC;EACnC;EAEA,IAAI;IAAEG,MAAM;IAAEF,IAAI;IAAE,GAAGG;EAAY,CAAC,GAAGN,MAAM;EAC7CM,WAAW,GAAGnB,aAAa,CAACI,mBAAmB,EAAEC,SAAS,EAAEc,WAAW,CAAC;EAExE,IAAIC,IAAI,GAAG,EAAE;EACb,IAAIF,MAAM,IAAI,IAAI,EAAEA,MAAM,GAAG,MAAM;EACnCE,IAAI,GAAG,GAAG,GAAG,UAAU;;EAEvB;EACA,MAAMC,OAAO,GAAG;IACdH,MAAM;IACNE,IAAI;IACJJ,IAAI,EAAEA,IAAI,IAAI,EAAE;IAChBG;EACF,CAAC;EAED,OAAO,IAAI,CAACG,SAAS,CAACD,OAAO,CAACA,OAAO,EAAEP,OAAO,EAAEC,QAAQ,CAAC;AAC3D;AAEAQ,MAAM,CAACC,OAAO,GAAGZ,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}