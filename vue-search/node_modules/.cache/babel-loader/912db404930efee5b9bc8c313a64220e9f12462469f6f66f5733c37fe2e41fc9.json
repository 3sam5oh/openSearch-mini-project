{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst acceptedQuerystring = ['stored_fields', 'preference', 'realtime', 'refresh', 'routing', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  storedFields: 'stored_fields',\n  _sourceExcludes: '_source_excludes',\n  _sourceExclude: '_source_exclude',\n  _sourceIncludes: '_source_includes',\n  _sourceInclude: '_source_include',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\n/**\n * Retrieve multiple documents\n * <br/> See Also: {@link https://opensearch.org/docs/2.4/api-reference/document-apis/multi-get/ OpenSearch - Multi-get Document}\n *\n * @memberOf API-Document\n *\n * @param {Object} params\n * @param {string} params.index - Name of the index.\n * @param {string} params.id - Document ID.\n * @param {string} params.body - {@link https://opensearch.org/docs/2.4/api-reference/document-apis/multi-get/#request-body Multi-get Request Body}\n * @param {string} [params.preference] - Specifies a preference of which shard to retrieve results from. Available options are '_local', which tells the operation to retrieve results from a locally allocated shard replica, and a custom string value assigned to a specific shard replica. By default, OpenSearch executes get document operations on random shards.\n * @param {boolean} [params.realtime=true] - Specifies whether the operation should run in realtime. If false, the operation waits for the index to refresh to analyze the source to retrieve data, which makes the operation near-realtime.\n * @param {boolean} [params.refresh=false] - If true, OpenSearch refreshes shards to make the get operation available to search results. Valid options are 'true', 'false', and 'wait_for', which tells OpenSearch to wait for a refresh before executing the operation.\n * @param {string} [params.routing] - A value used to route the operation to a specific shard.\n * @param {boolean} [params.stored_fields=false] - Whether the get operation should retrieve fields stored in the index.\n * @param {string} [params._source=true] - Whether to include the '_source' field in the response body.\n * @param {string} [params._source_excludes] - A comma-separated list of source fields to exclude in the query response.\n * @param {string} [params._source_includes] - A comma-separated list of source fields to include in the query response.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/2.4/api-reference/document-apis/multi-get/#response Multi-get Response}\n */\nfunction mgetApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (params.type != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (index != null && type != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_mget';\n  } else if (index != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_mget';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_mget';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\nmodule.exports = mgetApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","storedFields","_sourceExcludes","_sourceExclude","_sourceIncludes","_sourceInclude","errorTrace","filterPath","mgetApi","params","options","callback","body","err","type","index","method","querystring","path","encodeURIComponent","request","transport","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/mget.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils');\nconst acceptedQuerystring = [\n  'stored_fields',\n  'preference',\n  'realtime',\n  'refresh',\n  'routing',\n  '_source',\n  '_source_excludes',\n  '_source_exclude',\n  '_source_includes',\n  '_source_include',\n  'pretty',\n  'human',\n  'error_trace',\n  'source',\n  'filter_path',\n];\nconst snakeCase = {\n  storedFields: 'stored_fields',\n  _sourceExcludes: '_source_excludes',\n  _sourceExclude: '_source_exclude',\n  _sourceIncludes: '_source_includes',\n  _sourceInclude: '_source_include',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n};\n\n/**\n * Retrieve multiple documents\n * <br/> See Also: {@link https://opensearch.org/docs/2.4/api-reference/document-apis/multi-get/ OpenSearch - Multi-get Document}\n *\n * @memberOf API-Document\n *\n * @param {Object} params\n * @param {string} params.index - Name of the index.\n * @param {string} params.id - Document ID.\n * @param {string} params.body - {@link https://opensearch.org/docs/2.4/api-reference/document-apis/multi-get/#request-body Multi-get Request Body}\n * @param {string} [params.preference] - Specifies a preference of which shard to retrieve results from. Available options are '_local', which tells the operation to retrieve results from a locally allocated shard replica, and a custom string value assigned to a specific shard replica. By default, OpenSearch executes get document operations on random shards.\n * @param {boolean} [params.realtime=true] - Specifies whether the operation should run in realtime. If false, the operation waits for the index to refresh to analyze the source to retrieve data, which makes the operation near-realtime.\n * @param {boolean} [params.refresh=false] - If true, OpenSearch refreshes shards to make the get operation available to search results. Valid options are 'true', 'false', and 'wait_for', which tells OpenSearch to wait for a refresh before executing the operation.\n * @param {string} [params.routing] - A value used to route the operation to a specific shard.\n * @param {boolean} [params.stored_fields=false] - Whether the get operation should retrieve fields stored in the index.\n * @param {string} [params._source=true] - Whether to include the '_source' field in the response body.\n * @param {string} [params._source_excludes] - A comma-separated list of source fields to exclude in the query response.\n * @param {string} [params._source_includes] - A comma-separated list of source fields to include in the query response.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/2.4/api-reference/document-apis/multi-get/#response Multi-get Response}\n */\nfunction mgetApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (params.type != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let { method, body, index, type, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (index != null && type != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_mget';\n  } else if (index != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_mget';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_mget';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = mgetApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}