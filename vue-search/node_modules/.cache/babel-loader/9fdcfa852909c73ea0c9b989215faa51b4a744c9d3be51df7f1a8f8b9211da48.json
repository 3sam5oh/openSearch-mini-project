{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"wrap\"\n};\nconst _hoisted_2 = {\n  class: \"header\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"headerName\"\n}, [/*#__PURE__*/_createTextVNode(\"Open\"), /*#__PURE__*/_createElementVNode(\"br\"), /*#__PURE__*/_createTextVNode(\"Search\")], -1 /* HOISTED */);\nconst _hoisted_4 = {\n  class: \"search-container\"\n};\nconst _hoisted_5 = {\n  class: \"content\"\n};\nconst _hoisted_6 = {\n  class: \"context\"\n};\nconst _hoisted_7 = {\n  key: 0\n};\nconst _hoisted_8 = {\n  key: 1\n};\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"p\", null, \"검색결과 :\", -1 /* HOISTED */);\nconst _hoisted_10 = {\n  key: 2\n};\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"p\", null, \"결과가 없습니다.\", -1 /* HOISTED */);\nconst _hoisted_12 = [_hoisted_11];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 헤더 \"), _createElementVNode(\"header\", _hoisted_2, [_hoisted_3, _createElementVNode(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"search\",\n    placeholder: \"검색어입력\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.searchQuery = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.fetchSynonyms && $options.fetchSynonyms(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.searchQuery]])])]), _createCommentVNode(\" 내용 \"), _createElementVNode(\"body\", null, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createTextVNode(\" 검색어 : \" + _toDisplayString($data.searchQuery) + \" \", 1 /* TEXT */), $data.synonyms.length ? (_openBlock(), _createElementBlock(\"p\", _hoisted_7, \"동의어 제안: \" + _toDisplayString($data.synonyms.join(',')), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $data.synonyms.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_hoisted_9, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.synonyms, synonym => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: synonym\n    }, _toDisplayString(synonym), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [..._hoisted_12]))])])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createTextVNode","key","_hoisted_11","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2","_hoisted_3","_hoisted_4","type","placeholder","_cache","$event","$data","searchQuery","onInput","args","$options","fetchSynonyms","_hoisted_5","_hoisted_6","_toDisplayString","synonyms","length","_hoisted_7","join","_hoisted_8","_hoisted_9","_Fragment","_renderList","synonym","_hoisted_10","_hoisted_12"],"sources":["C:\\search\\vue-search\\src\\views\\SearchMain.vue"],"sourcesContent":["<template>\r\n    <div class=\"wrap\">\r\n        <!-- 헤더 -->\r\n        <header class=\"header\">\r\n            <div class=\"headerName\">Open<br>Search</div>\r\n            <div class=\"search-container\">\r\n                <input type=\"search\" placeholder=\"검색어입력\" v-model=\"searchQuery\" @input=\"fetchSynonyms\">\r\n            </div>\r\n        </header>\r\n\r\n        <!-- 내용 -->\r\n\r\n        <body>\r\n            <div class=\"content\">\r\n                <div class=\"context\">\r\n                    검색어 : {{ searchQuery }}\r\n                    <p v-if=\"synonyms.length\">동의어 제안: {{ synonyms.join(',') }}</p>\r\n                    <div v-if=\"synonyms.length\">\r\n                        <p>검색결과 :</p>\r\n                        <ul>\r\n                            <li v-for=\"synonym in synonyms\" :key=\"synonym\">{{ synonym }}</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div v-else>\r\n                        <p>결과가 없습니다.</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </body>\r\n\r\n    </div>\r\n</template>\r\n<script>\r\nimport '@/assets/css/index.css'\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    name: \"SearchMain\",\r\n    components: {},\r\n    data() {\r\n        return {\r\n            searchQuery: '', // 검색어\r\n            synonyms: [],   // 동의어\r\n        };\r\n    },\r\n    methods: {\r\n        async fetchSynonyms() {\r\n            let query = this.searchQuery.trim();\r\n\r\n            // 네이버 맞춤법 검사기 API 호출\r\n            if (query.length > 0) {\r\n                try {\r\n                    const correctionResponse = await axios.get('/api/v1/search/errata', {\r\n                        headers: {\r\n                            'X-Naver-Client-Id': 'HMfqGNJy1U9czwPDacct',\r\n                            'X-Naver-Client-Secret': 'ncUkkRXeUU',\r\n                            'Content-Type': 'plain/text'\r\n                        },\r\n                        params: { query }\r\n                    });\r\n\r\n                    if (correctionResponse.data && correctionResponse.data.errata && correctionResponse.data.errata.length > 0) {\r\n                        query = correctionResponse.data.errata[0].corrected || query;\r\n                    } else {\r\n                        console.warn('No correction data found:', correctionResponse.data);\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error correcting query:', error);\r\n                }\r\n            }\r\n\r\n            // 교정된 검색어로 네이버 검색 API 호출\r\n            if (query.length > 0) {\r\n                try {\r\n                    const response = await axios.get(`/api/v1/search/encyc.json`, {\r\n                        params: { query },\r\n                        headers: {\r\n                            'X-Naver-Client-Id': 'HMfqGNJy1U9czwPDacct',\r\n                            'X-Naver-Client-Secret': 'ncUkkRXeUU'\r\n                        }\r\n                    });\r\n\r\n                    if (response.data && response.data.items) {\r\n                        this.synonyms = response.data.items.slice(0, 1).map(item => this.stripHtmlTags(item.title));\r\n                    } else {\r\n                        console.warn('No items found in response:', response.data);\r\n                        this.synonyms = [];\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error fetching synonyms:', error);\r\n                    this.synonyms = [];\r\n                }\r\n            } else {\r\n                this.synonyms = [];\r\n            }\r\n\r\n\r\n            // axios\r\n            axios({\r\n                method: 'get',  //put,post,delete\r\n                url: 'search-amazon-opensearch-hnkbsyqioeqlcw4hwvtmb633ba.ap-northeast-2.es.amazonaws.com:443',\r\n                headers: { \"Content-Type\": \"application/json; charset=utf-8\" }, //전송타입\r\n                params: { query: query }, \r\n\r\n                responseType: 'json' //수신타입\r\n            }).then(response => {\r\n                console.log(response.data); //수신데이타\r\n                console.log(response.data.apiData); //수신데이타\r\n                this.orderedList = response.data.apiData;\r\n\r\n            }).catch(error => {\r\n                console.log(error);\r\n            });\r\n\r\n        },\r\n        stripHtmlTags(str) {\r\n            return str.replace(/<\\/?[^>]+>/gi, \"\");\r\n        }\r\n    }\r\n};\r\n</script>\r\n"],"mappings":";;EACSA,KAAK,EAAC;AAAM;;EAELA,KAAK,EAAC;AAAQ;gCAClBC,mBAAA,CAA4C;EAAvCD,KAAK,EAAC;AAAY,I,aAJnCE,gBAAA,CAIoC,MAAI,G,aAAAD,mBAAA,CAAI,O,aAJ5CC,gBAAA,CAI4C,QAAM,E;;EACjCF,KAAK,EAAC;AAAkB;;EAQxBA,KAAK,EAAC;AAAS;;EACXA,KAAK,EAAC;AAAS;;EAdpCG,GAAA;AAAA;;EAAAA,GAAA;AAAA;gCAkBwBF,mBAAA,CAAa,WAAV,QAAM;;EAlBjCE,GAAA;AAAA;iCAwBwBF,mBAAA,CAAgB,WAAb,WAAS;qBAAZG,WAAgB,C;;uBAvBpCC,mBAAA,CA6BM,OA7BNC,UA6BM,GA5BFC,mBAAA,QAAW,EACXN,mBAAA,CAKS,UALTO,UAKS,GAJLC,UAA4C,EAC5CR,mBAAA,CAEM,OAFNS,UAEM,G,gBADFT,mBAAA,CAAsF;IAA/EU,IAAI,EAAC,QAAQ;IAACC,WAAW,EAAC,OAAO;IANxD,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAMkEC,KAAA,CAAAC,WAAW,GAAAF,MAAA;IAAGG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;iEAAlCH,KAAA,CAAAC,WAAW,E,OAIrET,mBAAA,QAAW,EAEXN,mBAAA,CAgBO,eAfHA,mBAAA,CAcM,OAdNoB,UAcM,GAbFpB,mBAAA,CAYM,OAZNqB,UAYM,GA1BtBpB,gBAAA,CAcqC,SACX,GAAAqB,gBAAA,CAAGR,KAAA,CAAAC,WAAW,IAAG,GACvB,iBAASD,KAAA,CAAAS,QAAQ,CAACC,MAAM,I,cAAxBpB,mBAAA,CAA8D,KAhBlFqB,UAAA,EAgB8C,UAAQ,GAAAH,gBAAA,CAAGR,KAAA,CAAAS,QAAQ,CAACG,IAAI,yBAhBtEpB,mBAAA,gBAiB+BQ,KAAA,CAAAS,QAAQ,CAACC,MAAM,I,cAA1BpB,mBAAA,CAKM,OAtB1BuB,UAAA,GAkBwBC,UAAa,EACb5B,mBAAA,CAEK,c,kBADDI,mBAAA,CAAiEyB,SAAA,QApB7FC,WAAA,CAoBkDhB,KAAA,CAAAS,QAAQ,EAAnBQ,OAAO;yBAAlB3B,mBAAA,CAAiE;MAAhCF,GAAG,EAAE6B;IAAO,GAAAT,gBAAA,CAAKS,OAAO;uDAGjE3B,mBAAA,CAEM,OAzB1B4B,WAAA,MAAAC,WAAA,I","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}