{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\n/**\n * Deletes one or several PITs. PITs are automatically deleted when the keep_alive time period elapses. However, to deallocate resources, you can delete a PIT using the Delete PIT API.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/opensearch/point-in-time-api#delete-pits|Opensearch - Delete PITs}\n * @memberOf API-PIT\n *\n * @param {Object} params\n * @param {Object} params.body\n * @param {string[]} params.body.pit_id - The PIT IDs of the PITs to be deleted.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/opensearch/point-in-time-api#sample-response-2|Delete PIT Response}\n */\nfunction deletePitApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params['body'] == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_search' + '/' + 'point_in_time';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\nmodule.exports = deletePitApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","errorTrace","filterPath","deletePitApi","params","options","callback","err","method","body","querystring","path","request","transport","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/delete_pit.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils');\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' };\n\n/**\n * Deletes one or several PITs. PITs are automatically deleted when the keep_alive time period elapses. However, to deallocate resources, you can delete a PIT using the Delete PIT API.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/opensearch/point-in-time-api#delete-pits|Opensearch - Delete PITs}\n * @memberOf API-PIT\n *\n * @param {Object} params\n * @param {Object} params.body\n * @param {string[]} params.body.pit_id - The PIT IDs of the PITs to be deleted.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/opensearch/point-in-time-api#sample-response-2|Delete PIT Response}\n */\nfunction deletePitApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params['body'] == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_search' + '/' + 'point_in_time';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = deletePitApi;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AAEA,MAAM;EAAEA,WAAW;EAAEC,aAAa;EAAEC,kBAAkB;EAAEC;AAAoB,CAAC,GAAGC,OAAO,CAAC,UAAU,CAAC;AACnG,MAAMC,mBAAmB,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,aAAa,CAAC;AACvF,MAAMC,SAAS,GAAG;EAAEC,UAAU,EAAE,aAAa;EAAEC,UAAU,EAAE;AAAc,CAAC;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EAC/C,CAACF,MAAM,EAAEC,OAAO,EAAEC,QAAQ,CAAC,GAAGV,kBAAkB,CAACQ,MAAM,EAAEC,OAAO,EAAEC,QAAQ,CAAC;;EAE3E;EACA,IAAIF,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE;IAC1B,MAAMG,GAAG,GAAG,IAAI,IAAI,CAACV,mBAAmB,CAAC,CAAC,kCAAkC,CAAC;IAC7E,OAAOH,WAAW,CAACa,GAAG,EAAED,QAAQ,CAAC;EACnC;EAEA,IAAI;IAAEE,MAAM;IAAEC,IAAI;IAAE,GAAGC;EAAY,CAAC,GAAGN,MAAM;EAC7CM,WAAW,GAAGf,aAAa,CAACI,mBAAmB,EAAEC,SAAS,EAAEU,WAAW,CAAC;EAExE,IAAIC,IAAI,GAAG,EAAE;EACb,IAAIH,MAAM,IAAI,IAAI,EAAEA,MAAM,GAAG,QAAQ;EACrCG,IAAI,GAAG,GAAG,GAAG,SAAS,GAAG,GAAG,GAAG,eAAe;;EAE9C;EACA,MAAMC,OAAO,GAAG;IACdJ,MAAM;IACNG,IAAI;IACJF,IAAI,EAAEA,IAAI,IAAI,EAAE;IAChBC;EACF,CAAC;EAED,OAAO,IAAI,CAACG,SAAS,CAACD,OAAO,CAACA,OAAO,EAAEP,OAAO,EAAEC,QAAQ,CAAC;AAC3D;AAEAQ,MAAM,CAACC,OAAO,GAAGZ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}