{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst acceptedQuerystring = ['term_statistics', 'field_statistics', 'fields', 'offsets', 'positions', 'payloads', 'preference', 'routing', 'realtime', 'version', 'version_type', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  termStatistics: 'term_statistics',\n  fieldStatistics: 'field_statistics',\n  versionType: 'version_type',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\n/**\n * Returns information and statistics about terms in the fields of a particular document.\n *\n * @memberOf API-Document\n *\n * @param {Object} params\n * @param {string} params.index - The index in which the document resides.\n * @param {string} [params.id] - The id of the document, when not specified a doc param should be supplied.\n * @param {boolean} [params.term_statistics] - Specifies if total term frequency and document frequency should be returned.\n * @param {boolean} [params.field_statistics] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {string} [params.fields] - A comma-separated list of fields to return.\n * @param {boolean} [params.offsets] - Specifies if term offsets should be returned.\n * @param {boolean} [params.positions] - Specifies if term positions should be returned.\n * @param {boolean} [params.payloads] - Specifies if term payloads should be returned.\n * @param {string} [params.preference] - Specify the node or shard the operation should be performed on (default: random).\n * @param {string} [params.routing] - Specific routing value.\n * @param {boolean} [params.realtime] - Specifies if request is real-time as opposed to near-real-time (default: true).\n * @param {number} [params.version] - Explicit version number for concurrency control\n * @param {string} [params.version_type] - Specific version type (options: internal, external, external_gte, force)\n * @param {Object} [params.body] - Define parameters and or supply a document to get termvectors for. See documentation.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nfunction termvectorsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    index,\n    id,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (index != null && type != null && id != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id) + '/' + '_termvectors';\n  } else if (index != null && id != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_termvectors' + '/' + encodeURIComponent(id);\n  } else if (index != null && type != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_termvectors';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_termvectors';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\nmodule.exports = termvectorsApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","termStatistics","fieldStatistics","versionType","errorTrace","filterPath","termvectorsApi","params","options","callback","index","err","method","body","id","type","querystring","path","encodeURIComponent","request","transport","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/termvectors.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils');\nconst acceptedQuerystring = [\n  'term_statistics',\n  'field_statistics',\n  'fields',\n  'offsets',\n  'positions',\n  'payloads',\n  'preference',\n  'routing',\n  'realtime',\n  'version',\n  'version_type',\n  'pretty',\n  'human',\n  'error_trace',\n  'source',\n  'filter_path',\n];\nconst snakeCase = {\n  termStatistics: 'term_statistics',\n  fieldStatistics: 'field_statistics',\n  versionType: 'version_type',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n};\n\n/**\n * Returns information and statistics about terms in the fields of a particular document.\n *\n * @memberOf API-Document\n *\n * @param {Object} params\n * @param {string} params.index - The index in which the document resides.\n * @param {string} [params.id] - The id of the document, when not specified a doc param should be supplied.\n * @param {boolean} [params.term_statistics] - Specifies if total term frequency and document frequency should be returned.\n * @param {boolean} [params.field_statistics] - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n * @param {string} [params.fields] - A comma-separated list of fields to return.\n * @param {boolean} [params.offsets] - Specifies if term offsets should be returned.\n * @param {boolean} [params.positions] - Specifies if term positions should be returned.\n * @param {boolean} [params.payloads] - Specifies if term payloads should be returned.\n * @param {string} [params.preference] - Specify the node or shard the operation should be performed on (default: random).\n * @param {string} [params.routing] - Specific routing value.\n * @param {boolean} [params.realtime] - Specifies if request is real-time as opposed to near-real-time (default: true).\n * @param {number} [params.version] - Explicit version number for concurrency control\n * @param {string} [params.version_type] - Specific version type (options: internal, external, external_gte, force)\n * @param {Object} [params.body] - Define parameters and or supply a document to get termvectors for. See documentation.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nfunction termvectorsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let { method, body, index, id, type, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (index != null && type != null && id != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path =\n      '/' +\n      encodeURIComponent(index) +\n      '/' +\n      encodeURIComponent(type) +\n      '/' +\n      encodeURIComponent(id) +\n      '/' +\n      '_termvectors';\n  } else if (index != null && id != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_termvectors' + '/' + encodeURIComponent(id);\n  } else if (index != null && type != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_termvectors';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_termvectors';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = termvectorsApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}