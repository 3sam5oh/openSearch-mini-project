{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n'use strict';\n\n/** @namespace API-Security */\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\nconst {\n  handleError,\n  snakeCaseKeys,\n  encodePathParam,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst snakeCase = {};\nfunction SecurityApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n/**\n * Changes the password for the current user.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#change-password - Security - Change Password}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.changePassword = function securityChangePasswordApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'account'].filter(c => c != null).join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Creates or replaces the specified action group.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#create-action-group - Security - Create Action Group}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.action_group - The name of the action group to create or replace\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.createActionGroup = function securityCreateActionGroupApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.actionGroup == null && params.action_group == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: action_group');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    actionGroup,\n    action_group,\n    ...querystring\n  } = params;\n  action_group = encodePathParam(actionGroup, action_group);\n  let path = ['', '_plugins', '_security', 'api', 'actiongroups', action_group].filter(c => c != null).join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Creates or replaces the specified role.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#create-role - Security - Create Role}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.role\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.createRole = function securityCreateRoleApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.role == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: role');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    role,\n    ...querystring\n  } = params;\n  role = encodePathParam(role);\n  let path = ['', '_plugins', '_security', 'api', 'roles', role].filter(c => c != null).join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Creates or replaces the specified role mapping.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#create-role-mapping - Security - Create Role Mapping}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.role\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.createRoleMapping = function securityCreateRoleMappingApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.role == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: role');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    role,\n    ...querystring\n  } = params;\n  role = encodePathParam(role);\n  let path = ['', '_plugins', '_security', 'api', 'rolesmapping', role].filter(c => c != null).join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Creates or replaces the specified tenant.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#create-tenant - Security - Create Tenant}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.tenant\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.createTenant = function securityCreateTenantApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.tenant == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: tenant');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    tenant,\n    ...querystring\n  } = params;\n  tenant = encodePathParam(tenant);\n  let path = ['', '_plugins', '_security', 'api', 'tenants', tenant].filter(c => c != null).join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Creates or replaces the specified user.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#create-user - Security - Create User}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.username\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.createUser = function securityCreateUserApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.username == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: username');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    username,\n    ...querystring\n  } = params;\n  username = encodePathParam(username);\n  let path = ['', '_plugins', '_security', 'api', 'internalusers', username].filter(c => c != null).join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Delete a specified action group.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#delete-action-group - Security - Delete Action Group}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.action_group - Action group to delete.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.deleteActionGroup = function securityDeleteActionGroupApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.actionGroup == null && params.action_group == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: action_group');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    actionGroup,\n    action_group,\n    ...querystring\n  } = params;\n  action_group = encodePathParam(actionGroup, action_group);\n  let path = ['', '_plugins', '_security', 'api', 'actiongroups', action_group].filter(c => c != null).join('/');\n  method = method || 'DELETE';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Deletes all distinguished names in the specified cluster’s or node’s allow list.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#delete-distinguished-names - Security - Delete Distinguished Names}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.cluster_name\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.deleteDistinguishedNames = function securityDeleteDistinguishedNamesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.clusterName == null && params.cluster_name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: cluster_name');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    clusterName,\n    cluster_name,\n    ...querystring\n  } = params;\n  cluster_name = encodePathParam(clusterName, cluster_name);\n  let path = ['', '_plugins', '_security', 'api', 'nodesdn', cluster_name].filter(c => c != null).join('/');\n  method = method || 'DELETE';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Delete the specified role.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#delete-role - Security - Delete Role}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.role\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.deleteRole = function securityDeleteRoleApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.role == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: role');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    role,\n    ...querystring\n  } = params;\n  role = encodePathParam(role);\n  let path = ['', '_plugins', '_security', 'api', 'roles', role].filter(c => c != null).join('/');\n  method = method || 'DELETE';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Deletes the specified role mapping.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#delete-role-mapping - Security - Delete Role Mapping}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.role\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.deleteRoleMapping = function securityDeleteRoleMappingApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.role == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: role');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    role,\n    ...querystring\n  } = params;\n  role = encodePathParam(role);\n  let path = ['', '_plugins', '_security', 'api', 'rolesmapping', role].filter(c => c != null).join('/');\n  method = method || 'DELETE';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Delete the specified tenant.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#delete-action-group - Security - Delete Tenant}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.tenant\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.deleteTenant = function securityDeleteTenantApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.tenant == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: tenant');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    tenant,\n    ...querystring\n  } = params;\n  tenant = encodePathParam(tenant);\n  let path = ['', '_plugins', '_security', 'api', 'tenants', tenant].filter(c => c != null).join('/');\n  method = method || 'DELETE';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Delete the specified user.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#delete-user - Security - Delete User}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.username\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.deleteUser = function securityDeleteUserApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.username == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: username');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    username,\n    ...querystring\n  } = params;\n  username = encodePathParam(username);\n  let path = ['', '_plugins', '_security', 'api', 'internalusers', username].filter(c => c != null).join('/');\n  method = method || 'DELETE';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Flushes the Security plugin user, authentication, and authorization cache.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#flush-cache - Security - Flush Cache}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.flushCache = function securityFlushCacheApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'cache'].filter(c => c != null).join('/');\n  method = method || 'DELETE';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Returns account details for the current user.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-account-details - Security - Get Account Details}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getAccountDetails = function securityGetAccountDetailsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'account'].filter(c => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Retrieves one action group.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-action-group - Security - Get Action Group}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.action_group - Action group to retrieve.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getActionGroup = function securityGetActionGroupApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.actionGroup == null && params.action_group == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: action_group');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    actionGroup,\n    action_group,\n    ...querystring\n  } = params;\n  action_group = encodePathParam(actionGroup, action_group);\n  let path = ['', '_plugins', '_security', 'api', 'actiongroups', action_group].filter(c => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Retrieves all action groups.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-action-groups - Security - Get Action Groups}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getActionGroups = function securityGetActionGroupsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'actiongroups'].filter(c => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Retrieves the audit configuration.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#audit-logs - Security - Get Audit Configuration}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getAuditConfiguration = function securityGetAuditConfigurationApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'audit'].filter(c => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Retrieves the cluster’s security certificates.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-certificates - Security - Get Certificates}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getCertificates = function securityGetCertificatesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'ssl', 'certs'].filter(c => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Returns the current Security plugin configuration in JSON format.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#get-configuration - Security - Get Configuration}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getConfiguration = function securityGetConfigurationApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'securityconfig'].filter(c => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Retrieves all distinguished names in the allow list.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-distinguished-names - Security - Get Distinguished Names}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} [params.cluster_name]\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getDistinguishedNames = function securityGetDistinguishedNamesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    clusterName,\n    cluster_name,\n    ...querystring\n  } = params;\n  cluster_name = encodePathParam(clusterName, cluster_name);\n  let path = ['', '_plugins', '_security', 'api', 'nodesdn', cluster_name].filter(c => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Retrieves one role.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-role - Security - Get Role}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.role\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getRole = function securityGetRoleApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.role == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: role');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    role,\n    ...querystring\n  } = params;\n  role = encodePathParam(role);\n  let path = ['', '_plugins', '_security', 'api', 'roles', role].filter(c => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Retrieves one role mapping.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-role-mapping - Security - Get Role Mapping}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.role\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getRoleMapping = function securityGetRoleMappingApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.role == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: role');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    role,\n    ...querystring\n  } = params;\n  role = encodePathParam(role);\n  let path = ['', '_plugins', '_security', 'api', 'rolesmapping', role].filter(c => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Retrieves all role mappings.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-role-mappings - Security - Get Role Mappings}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getRoleMappings = function securityGetRoleMappingsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'rolesmapping'].filter(c => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Retrieves all roles.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-roles - Security - Get Roles}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getRoles = function securityGetRolesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'roles'].filter(c => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Retrieves one tenant.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#get-tenant - Security - Get Tenant}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.tenant\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getTenant = function securityGetTenantApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.tenant == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: tenant');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    tenant,\n    ...querystring\n  } = params;\n  tenant = encodePathParam(tenant);\n  let path = ['', '_plugins', '_security', 'api', 'tenants', tenant].filter(c => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Retrieves all tenants.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#get-tenants - Security - Get Tenants}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getTenants = function securityGetTenantsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'tenants'].filter(c => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Retrieve one internal user.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-user - Security - Get User}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.username\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getUser = function securityGetUserApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.username == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: username');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    username,\n    ...querystring\n  } = params;\n  username = encodePathParam(username);\n  let path = ['', '_plugins', '_security', 'api', 'internalusers', username].filter(c => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Retrieve all internal users.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-users - Security - Get Users}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getUsers = function securityGetUsersApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'internalusers'].filter(c => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Checks to see if the Security plugin is up and running.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#health-check - Security - Health}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.health = function securityHealthApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'health'].filter(c => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Updates individual attributes of an action group.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#patch-action-group - Security - Patch Action Group}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.action_group\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchActionGroup = function securityPatchActionGroupApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.actionGroup == null && params.action_group == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: action_group');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    actionGroup,\n    action_group,\n    ...querystring\n  } = params;\n  action_group = encodePathParam(actionGroup, action_group);\n  let path = ['', '_plugins', '_security', 'api', 'actiongroups', action_group].filter(c => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Creates, updates, or deletes multiple action groups in a single call.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#patch-action-groups - Security - Patch Action Groups}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchActionGroups = function securityPatchActionGroupsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'actiongroups'].filter(c => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * A PATCH call is used to update specified fields in the audit configuration.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#audit-logs - Security - Patch Audit Configuration}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchAuditConfiguration = function securityPatchAuditConfigurationApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'audit'].filter(c => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * A PATCH call is used to update the existing configuration using the REST API.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#patch-configuration - Security - Patch Configuration}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchConfiguration = function securityPatchConfigurationApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'securityconfig'].filter(c => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Bulk update of distinguished names.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#update-all-distinguished-names - Security - Patch Distinguished Names}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchDistinguishedNames = function securityPatchDistinguishedNamesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'nodesdn'].filter(c => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Updates individual attributes of a role.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#patch-role - Security - Patch Role}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.role\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchRole = function securityPatchRoleApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.role == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: role');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    role,\n    ...querystring\n  } = params;\n  role = encodePathParam(role);\n  let path = ['', '_plugins', '_security', 'api', 'roles', role].filter(c => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Updates individual attributes of a role mapping.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#patch-role-mapping - Security - Patch Role Mapping}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.role\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchRoleMapping = function securityPatchRoleMappingApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.role == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: role');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    role,\n    ...querystring\n  } = params;\n  role = encodePathParam(role);\n  let path = ['', '_plugins', '_security', 'api', 'rolesmapping', role].filter(c => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Creates or updates multiple role mappings in a single call.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#patch-role-mappings - Security - Patch Role Mappings}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchRoleMappings = function securityPatchRoleMappingsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'rolesmapping'].filter(c => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Creates, updates, or deletes multiple roles in a single call.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#patch-roles - Security - Patch Roles}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchRoles = function securityPatchRolesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'roles'].filter(c => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Add, delete, or modify a single tenant.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#patch-tenant - Security - Patch Tenant}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.tenant\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchTenant = function securityPatchTenantApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.tenant == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: tenant');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    tenant,\n    ...querystring\n  } = params;\n  tenant = encodePathParam(tenant);\n  let path = ['', '_plugins', '_security', 'api', 'tenants', tenant].filter(c => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Add, delete, or modify multiple tenants in a single call.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#patch-tenants - Security - Patch Tenants}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchTenants = function securityPatchTenantsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'tenants'].filter(c => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Updates individual attributes of an internal user.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#patch-user - Security - Patch User}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.username\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchUser = function securityPatchUserApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.username == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: username');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    username,\n    ...querystring\n  } = params;\n  username = encodePathParam(username);\n  let path = ['', '_plugins', '_security', 'api', 'internalusers', username].filter(c => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Creates, updates, or deletes multiple internal users in a single call.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#patch-users - Security - Patch Users}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchUsers = function securityPatchUsersApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'internalusers'].filter(c => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Reload HTTP layer communication certificates.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#reload-http-certificates - Security - Reload Http Certificates}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.reloadHttpCertificates = function securityReloadHttpCertificatesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'ssl', 'http', 'reloadcerts'].filter(c => c != null).join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Reload transport layer communication certificates.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#reload-transport-certificates - Security - Reload Transport Certificates}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.reloadTransportCertificates = function securityReloadTransportCertificatesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'ssl', 'transport', 'reloadcerts'].filter(c => c != null).join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Updates the audit configuration.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#audit-logs - Security - Update Audit Configuration}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.updateAuditConfiguration = function securityUpdateAuditConfigurationApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'audit', 'config'].filter(c => c != null).join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Adds or updates the existing configuration using the REST API.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#update-configuration - Security - Update Configuration}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.updateConfiguration = function securityUpdateConfigurationApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  let path = ['', '_plugins', '_security', 'api', 'securityconfig', 'config'].filter(c => c != null).join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\n\n/**\n * Adds or updates the specified distinguished names in the cluster’s or node’s allow list.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#update-distinguished-names - Security - Update Distinguished Names}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.cluster_name\n * @param {Object} [params.body]\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.updateDistinguishedNames = function securityUpdateDistinguishedNamesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  if (params.clusterName == null && params.cluster_name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: cluster_name');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    clusterName,\n    cluster_name,\n    ...querystring\n  } = params;\n  cluster_name = encodePathParam(clusterName, cluster_name);\n  let path = ['', '_plugins', '_security', 'api', 'nodesdn', cluster_name].filter(c => c != null).join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n  return this.transport.request({\n    method,\n    path,\n    body,\n    querystring\n  }, options, callback);\n};\nObject.defineProperties(SecurityApi.prototype, {\n  change_password: {\n    get() {\n      return this.changePassword;\n    }\n  },\n  create_action_group: {\n    get() {\n      return this.createActionGroup;\n    }\n  },\n  create_role: {\n    get() {\n      return this.createRole;\n    }\n  },\n  create_role_mapping: {\n    get() {\n      return this.createRoleMapping;\n    }\n  },\n  create_tenant: {\n    get() {\n      return this.createTenant;\n    }\n  },\n  create_user: {\n    get() {\n      return this.createUser;\n    }\n  },\n  delete_action_group: {\n    get() {\n      return this.deleteActionGroup;\n    }\n  },\n  delete_distinguished_names: {\n    get() {\n      return this.deleteDistinguishedNames;\n    }\n  },\n  delete_role: {\n    get() {\n      return this.deleteRole;\n    }\n  },\n  delete_role_mapping: {\n    get() {\n      return this.deleteRoleMapping;\n    }\n  },\n  delete_tenant: {\n    get() {\n      return this.deleteTenant;\n    }\n  },\n  delete_user: {\n    get() {\n      return this.deleteUser;\n    }\n  },\n  flush_cache: {\n    get() {\n      return this.flushCache;\n    }\n  },\n  get_account_details: {\n    get() {\n      return this.getAccountDetails;\n    }\n  },\n  get_action_group: {\n    get() {\n      return this.getActionGroup;\n    }\n  },\n  get_action_groups: {\n    get() {\n      return this.getActionGroups;\n    }\n  },\n  get_audit_configuration: {\n    get() {\n      return this.getAuditConfiguration;\n    }\n  },\n  get_certificates: {\n    get() {\n      return this.getCertificates;\n    }\n  },\n  get_configuration: {\n    get() {\n      return this.getConfiguration;\n    }\n  },\n  get_distinguished_names: {\n    get() {\n      return this.getDistinguishedNames;\n    }\n  },\n  get_role: {\n    get() {\n      return this.getRole;\n    }\n  },\n  get_role_mapping: {\n    get() {\n      return this.getRoleMapping;\n    }\n  },\n  get_role_mappings: {\n    get() {\n      return this.getRoleMappings;\n    }\n  },\n  get_roles: {\n    get() {\n      return this.getRoles;\n    }\n  },\n  get_tenant: {\n    get() {\n      return this.getTenant;\n    }\n  },\n  get_tenants: {\n    get() {\n      return this.getTenants;\n    }\n  },\n  get_user: {\n    get() {\n      return this.getUser;\n    }\n  },\n  get_users: {\n    get() {\n      return this.getUsers;\n    }\n  },\n  patch_action_group: {\n    get() {\n      return this.patchActionGroup;\n    }\n  },\n  patch_action_groups: {\n    get() {\n      return this.patchActionGroups;\n    }\n  },\n  patch_audit_configuration: {\n    get() {\n      return this.patchAuditConfiguration;\n    }\n  },\n  patch_configuration: {\n    get() {\n      return this.patchConfiguration;\n    }\n  },\n  patch_distinguished_names: {\n    get() {\n      return this.patchDistinguishedNames;\n    }\n  },\n  patch_role: {\n    get() {\n      return this.patchRole;\n    }\n  },\n  patch_role_mapping: {\n    get() {\n      return this.patchRoleMapping;\n    }\n  },\n  patch_role_mappings: {\n    get() {\n      return this.patchRoleMappings;\n    }\n  },\n  patch_roles: {\n    get() {\n      return this.patchRoles;\n    }\n  },\n  patch_tenant: {\n    get() {\n      return this.patchTenant;\n    }\n  },\n  patch_tenants: {\n    get() {\n      return this.patchTenants;\n    }\n  },\n  patch_user: {\n    get() {\n      return this.patchUser;\n    }\n  },\n  patch_users: {\n    get() {\n      return this.patchUsers;\n    }\n  },\n  reload_http_certificates: {\n    get() {\n      return this.reloadHttpCertificates;\n    }\n  },\n  reload_transport_certificates: {\n    get() {\n      return this.reloadTransportCertificates;\n    }\n  },\n  update_audit_configuration: {\n    get() {\n      return this.updateAuditConfiguration;\n    }\n  },\n  update_configuration: {\n    get() {\n      return this.updateConfiguration;\n    }\n  },\n  update_distinguished_names: {\n    get() {\n      return this.updateDistinguishedNames;\n    }\n  }\n});\nmodule.exports = SecurityApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","encodePathParam","normalizeArguments","kConfigurationError","require","snakeCase","SecurityApi","transport","ConfigurationError","prototype","changePassword","securityChangePasswordApi","params","options","callback","body","err","method","querystring","path","filter","c","join","request","createActionGroup","securityCreateActionGroupApi","actionGroup","action_group","createRole","securityCreateRoleApi","role","createRoleMapping","securityCreateRoleMappingApi","createTenant","securityCreateTenantApi","tenant","createUser","securityCreateUserApi","username","deleteActionGroup","securityDeleteActionGroupApi","deleteDistinguishedNames","securityDeleteDistinguishedNamesApi","clusterName","cluster_name","deleteRole","securityDeleteRoleApi","deleteRoleMapping","securityDeleteRoleMappingApi","deleteTenant","securityDeleteTenantApi","deleteUser","securityDeleteUserApi","flushCache","securityFlushCacheApi","getAccountDetails","securityGetAccountDetailsApi","getActionGroup","securityGetActionGroupApi","getActionGroups","securityGetActionGroupsApi","getAuditConfiguration","securityGetAuditConfigurationApi","getCertificates","securityGetCertificatesApi","getConfiguration","securityGetConfigurationApi","getDistinguishedNames","securityGetDistinguishedNamesApi","getRole","securityGetRoleApi","getRoleMapping","securityGetRoleMappingApi","getRoleMappings","securityGetRoleMappingsApi","getRoles","securityGetRolesApi","getTenant","securityGetTenantApi","getTenants","securityGetTenantsApi","getUser","securityGetUserApi","getUsers","securityGetUsersApi","health","securityHealthApi","patchActionGroup","securityPatchActionGroupApi","patchActionGroups","securityPatchActionGroupsApi","patchAuditConfiguration","securityPatchAuditConfigurationApi","patchConfiguration","securityPatchConfigurationApi","patchDistinguishedNames","securityPatchDistinguishedNamesApi","patchRole","securityPatchRoleApi","patchRoleMapping","securityPatchRoleMappingApi","patchRoleMappings","securityPatchRoleMappingsApi","patchRoles","securityPatchRolesApi","patchTenant","securityPatchTenantApi","patchTenants","securityPatchTenantsApi","patchUser","securityPatchUserApi","patchUsers","securityPatchUsersApi","reloadHttpCertificates","securityReloadHttpCertificatesApi","reloadTransportCertificates","securityReloadTransportCertificatesApi","updateAuditConfiguration","securityUpdateAuditConfigurationApi","updateConfiguration","securityUpdateConfigurationApi","updateDistinguishedNames","securityUpdateDistinguishedNamesApi","Object","defineProperties","change_password","get","create_action_group","create_role","create_role_mapping","create_tenant","create_user","delete_action_group","delete_distinguished_names","delete_role","delete_role_mapping","delete_tenant","delete_user","flush_cache","get_account_details","get_action_group","get_action_groups","get_audit_configuration","get_certificates","get_configuration","get_distinguished_names","get_role","get_role_mapping","get_role_mappings","get_roles","get_tenant","get_tenants","get_user","get_users","patch_action_group","patch_action_groups","patch_audit_configuration","patch_configuration","patch_distinguished_names","patch_role","patch_role_mapping","patch_role_mappings","patch_roles","patch_tenant","patch_tenants","patch_user","patch_users","reload_http_certificates","reload_transport_certificates","update_audit_configuration","update_configuration","update_distinguished_names","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/security.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n'use strict';\n\n/** @namespace API-Security */\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  encodePathParam,\n  normalizeArguments,\n  kConfigurationError,\n} = require('../utils');\nconst snakeCase = {};\n\nfunction SecurityApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n/**\n * Changes the password for the current user.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#change-password - Security - Change Password}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.changePassword = function securityChangePasswordApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'account'].filter((c) => c != null).join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Creates or replaces the specified action group.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#create-action-group - Security - Create Action Group}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.action_group - The name of the action group to create or replace\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.createActionGroup = function securityCreateActionGroupApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.actionGroup == null && params.action_group == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: action_group');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, actionGroup, action_group, ...querystring } = params;\n\n  action_group = encodePathParam(actionGroup, action_group);\n\n  let path = ['', '_plugins', '_security', 'api', 'actiongroups', action_group]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Creates or replaces the specified role.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#create-role - Security - Create Role}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.role\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.createRole = function securityCreateRoleApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.role == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: role');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, role, ...querystring } = params;\n\n  role = encodePathParam(role);\n\n  let path = ['', '_plugins', '_security', 'api', 'roles', role].filter((c) => c != null).join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Creates or replaces the specified role mapping.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#create-role-mapping - Security - Create Role Mapping}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.role\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.createRoleMapping = function securityCreateRoleMappingApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.role == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: role');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, role, ...querystring } = params;\n\n  role = encodePathParam(role);\n\n  let path = ['', '_plugins', '_security', 'api', 'rolesmapping', role]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Creates or replaces the specified tenant.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#create-tenant - Security - Create Tenant}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.tenant\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.createTenant = function securityCreateTenantApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.tenant == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: tenant');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, tenant, ...querystring } = params;\n\n  tenant = encodePathParam(tenant);\n\n  let path = ['', '_plugins', '_security', 'api', 'tenants', tenant]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Creates or replaces the specified user.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#create-user - Security - Create User}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.username\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.createUser = function securityCreateUserApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.username == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: username');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, username, ...querystring } = params;\n\n  username = encodePathParam(username);\n\n  let path = ['', '_plugins', '_security', 'api', 'internalusers', username]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Delete a specified action group.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#delete-action-group - Security - Delete Action Group}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.action_group - Action group to delete.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.deleteActionGroup = function securityDeleteActionGroupApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.actionGroup == null && params.action_group == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: action_group');\n    return handleError(err, callback);\n  }\n\n  let { method, body, actionGroup, action_group, ...querystring } = params;\n\n  action_group = encodePathParam(actionGroup, action_group);\n\n  let path = ['', '_plugins', '_security', 'api', 'actiongroups', action_group]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'DELETE';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Deletes all distinguished names in the specified cluster’s or node’s allow list.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#delete-distinguished-names - Security - Delete Distinguished Names}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.cluster_name\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.deleteDistinguishedNames = function securityDeleteDistinguishedNamesApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.clusterName == null && params.cluster_name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: cluster_name');\n    return handleError(err, callback);\n  }\n\n  let { method, body, clusterName, cluster_name, ...querystring } = params;\n\n  cluster_name = encodePathParam(clusterName, cluster_name);\n\n  let path = ['', '_plugins', '_security', 'api', 'nodesdn', cluster_name]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'DELETE';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Delete the specified role.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#delete-role - Security - Delete Role}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.role\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.deleteRole = function securityDeleteRoleApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.role == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: role');\n    return handleError(err, callback);\n  }\n\n  let { method, body, role, ...querystring } = params;\n\n  role = encodePathParam(role);\n\n  let path = ['', '_plugins', '_security', 'api', 'roles', role].filter((c) => c != null).join('/');\n  method = method || 'DELETE';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Deletes the specified role mapping.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#delete-role-mapping - Security - Delete Role Mapping}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.role\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.deleteRoleMapping = function securityDeleteRoleMappingApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.role == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: role');\n    return handleError(err, callback);\n  }\n\n  let { method, body, role, ...querystring } = params;\n\n  role = encodePathParam(role);\n\n  let path = ['', '_plugins', '_security', 'api', 'rolesmapping', role]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'DELETE';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Delete the specified tenant.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#delete-action-group - Security - Delete Tenant}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.tenant\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.deleteTenant = function securityDeleteTenantApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.tenant == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: tenant');\n    return handleError(err, callback);\n  }\n\n  let { method, body, tenant, ...querystring } = params;\n\n  tenant = encodePathParam(tenant);\n\n  let path = ['', '_plugins', '_security', 'api', 'tenants', tenant]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'DELETE';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Delete the specified user.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#delete-user - Security - Delete User}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.username\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.deleteUser = function securityDeleteUserApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.username == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: username');\n    return handleError(err, callback);\n  }\n\n  let { method, body, username, ...querystring } = params;\n\n  username = encodePathParam(username);\n\n  let path = ['', '_plugins', '_security', 'api', 'internalusers', username]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'DELETE';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Flushes the Security plugin user, authentication, and authorization cache.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#flush-cache - Security - Flush Cache}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.flushCache = function securityFlushCacheApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'cache'].filter((c) => c != null).join('/');\n  method = method || 'DELETE';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Returns account details for the current user.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-account-details - Security - Get Account Details}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getAccountDetails = function securityGetAccountDetailsApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'account'].filter((c) => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Retrieves one action group.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-action-group - Security - Get Action Group}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.action_group - Action group to retrieve.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getActionGroup = function securityGetActionGroupApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.actionGroup == null && params.action_group == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: action_group');\n    return handleError(err, callback);\n  }\n\n  let { method, body, actionGroup, action_group, ...querystring } = params;\n\n  action_group = encodePathParam(actionGroup, action_group);\n\n  let path = ['', '_plugins', '_security', 'api', 'actiongroups', action_group]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Retrieves all action groups.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-action-groups - Security - Get Action Groups}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getActionGroups = function securityGetActionGroupsApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'actiongroups']\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Retrieves the audit configuration.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#audit-logs - Security - Get Audit Configuration}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getAuditConfiguration = function securityGetAuditConfigurationApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'audit'].filter((c) => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Retrieves the cluster’s security certificates.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-certificates - Security - Get Certificates}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getCertificates = function securityGetCertificatesApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'ssl', 'certs']\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Returns the current Security plugin configuration in JSON format.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#get-configuration - Security - Get Configuration}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getConfiguration = function securityGetConfigurationApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'securityconfig']\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Retrieves all distinguished names in the allow list.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-distinguished-names - Security - Get Distinguished Names}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} [params.cluster_name]\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getDistinguishedNames = function securityGetDistinguishedNamesApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, clusterName, cluster_name, ...querystring } = params;\n\n  cluster_name = encodePathParam(clusterName, cluster_name);\n\n  let path = ['', '_plugins', '_security', 'api', 'nodesdn', cluster_name]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Retrieves one role.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-role - Security - Get Role}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.role\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getRole = function securityGetRoleApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.role == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: role');\n    return handleError(err, callback);\n  }\n\n  let { method, body, role, ...querystring } = params;\n\n  role = encodePathParam(role);\n\n  let path = ['', '_plugins', '_security', 'api', 'roles', role].filter((c) => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Retrieves one role mapping.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-role-mapping - Security - Get Role Mapping}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.role\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getRoleMapping = function securityGetRoleMappingApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.role == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: role');\n    return handleError(err, callback);\n  }\n\n  let { method, body, role, ...querystring } = params;\n\n  role = encodePathParam(role);\n\n  let path = ['', '_plugins', '_security', 'api', 'rolesmapping', role]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Retrieves all role mappings.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-role-mappings - Security - Get Role Mappings}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getRoleMappings = function securityGetRoleMappingsApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'rolesmapping']\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Retrieves all roles.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-roles - Security - Get Roles}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getRoles = function securityGetRolesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'roles'].filter((c) => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Retrieves one tenant.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#get-tenant - Security - Get Tenant}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.tenant\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getTenant = function securityGetTenantApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.tenant == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: tenant');\n    return handleError(err, callback);\n  }\n\n  let { method, body, tenant, ...querystring } = params;\n\n  tenant = encodePathParam(tenant);\n\n  let path = ['', '_plugins', '_security', 'api', 'tenants', tenant]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Retrieves all tenants.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#get-tenants - Security - Get Tenants}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getTenants = function securityGetTenantsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'tenants'].filter((c) => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Retrieve one internal user.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-user - Security - Get User}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.username\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getUser = function securityGetUserApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.username == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: username');\n    return handleError(err, callback);\n  }\n\n  let { method, body, username, ...querystring } = params;\n\n  username = encodePathParam(username);\n\n  let path = ['', '_plugins', '_security', 'api', 'internalusers', username]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Retrieve all internal users.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#get-users - Security - Get Users}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.getUsers = function securityGetUsersApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'internalusers']\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Checks to see if the Security plugin is up and running.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#health-check - Security - Health}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.health = function securityHealthApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'health'].filter((c) => c != null).join('/');\n  method = method || 'GET';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Updates individual attributes of an action group.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#patch-action-group - Security - Patch Action Group}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.action_group\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchActionGroup = function securityPatchActionGroupApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.actionGroup == null && params.action_group == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: action_group');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, actionGroup, action_group, ...querystring } = params;\n\n  action_group = encodePathParam(actionGroup, action_group);\n\n  let path = ['', '_plugins', '_security', 'api', 'actiongroups', action_group]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Creates, updates, or deletes multiple action groups in a single call.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#patch-action-groups - Security - Patch Action Groups}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchActionGroups = function securityPatchActionGroupsApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'actiongroups']\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * A PATCH call is used to update specified fields in the audit configuration.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#audit-logs - Security - Patch Audit Configuration}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchAuditConfiguration = function securityPatchAuditConfigurationApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'audit'].filter((c) => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * A PATCH call is used to update the existing configuration using the REST API.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#patch-configuration - Security - Patch Configuration}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchConfiguration = function securityPatchConfigurationApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'securityconfig']\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Bulk update of distinguished names.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#update-all-distinguished-names - Security - Patch Distinguished Names}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchDistinguishedNames = function securityPatchDistinguishedNamesApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'nodesdn'].filter((c) => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Updates individual attributes of a role.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#patch-role - Security - Patch Role}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.role\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchRole = function securityPatchRoleApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.role == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: role');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, role, ...querystring } = params;\n\n  role = encodePathParam(role);\n\n  let path = ['', '_plugins', '_security', 'api', 'roles', role].filter((c) => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Updates individual attributes of a role mapping.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#patch-role-mapping - Security - Patch Role Mapping}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.role\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchRoleMapping = function securityPatchRoleMappingApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.role == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: role');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, role, ...querystring } = params;\n\n  role = encodePathParam(role);\n\n  let path = ['', '_plugins', '_security', 'api', 'rolesmapping', role]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Creates or updates multiple role mappings in a single call.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#patch-role-mappings - Security - Patch Role Mappings}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchRoleMappings = function securityPatchRoleMappingsApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'rolesmapping']\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Creates, updates, or deletes multiple roles in a single call.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#patch-roles - Security - Patch Roles}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchRoles = function securityPatchRolesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'roles'].filter((c) => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Add, delete, or modify a single tenant.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#patch-tenant - Security - Patch Tenant}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.tenant\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchTenant = function securityPatchTenantApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.tenant == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: tenant');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, tenant, ...querystring } = params;\n\n  tenant = encodePathParam(tenant);\n\n  let path = ['', '_plugins', '_security', 'api', 'tenants', tenant]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Add, delete, or modify multiple tenants in a single call.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#patch-tenants - Security - Patch Tenants}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchTenants = function securityPatchTenantsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'tenants'].filter((c) => c != null).join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Updates individual attributes of an internal user.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#patch-user - Security - Patch User}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.username\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchUser = function securityPatchUserApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.username == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: username');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, username, ...querystring } = params;\n\n  username = encodePathParam(username);\n\n  let path = ['', '_plugins', '_security', 'api', 'internalusers', username]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Creates, updates, or deletes multiple internal users in a single call.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#patch-users - Security - Patch Users}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.patchUsers = function securityPatchUsersApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'internalusers']\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PATCH';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Reload HTTP layer communication certificates.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#reload-http-certificates - Security - Reload Http Certificates}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.reloadHttpCertificates = function securityReloadHttpCertificatesApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'ssl', 'http', 'reloadcerts']\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Reload transport layer communication certificates.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#reload-transport-certificates - Security - Reload Transport Certificates}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.reloadTransportCertificates = function securityReloadTransportCertificatesApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'ssl', 'transport', 'reloadcerts']\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Updates the audit configuration.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#audit-logs - Security - Update Audit Configuration}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.updateAuditConfiguration = function securityUpdateAuditConfigurationApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'audit', 'config']\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Adds or updates the existing configuration using the REST API.\n * <br/> See Also: {@link https://opensearch.org/docs/2.7/security/access-control/api/#update-configuration - Security - Update Configuration}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {Object} params.body\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.updateConfiguration = function securityUpdateConfigurationApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, ...querystring } = params;\n\n  let path = ['', '_plugins', '_security', 'api', 'securityconfig', 'config']\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\n/**\n * Adds or updates the specified distinguished names in the cluster’s or node’s allow list.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/security/access-control/api/#update-distinguished-names - Security - Update Distinguished Names}\n *\n * @memberOf API-Security\n *\n * @param {Object} params\n * @param {string} params.cluster_name\n * @param {Object} [params.body]\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSecurityApi.prototype.updateDistinguishedNames = function securityUpdateDistinguishedNamesApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  if (params.clusterName == null && params.cluster_name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: cluster_name');\n    return handleError(err, callback);\n  }\n\n  let { method, body, clusterName, cluster_name, ...querystring } = params;\n\n  cluster_name = encodePathParam(clusterName, cluster_name);\n\n  let path = ['', '_plugins', '_security', 'api', 'nodesdn', cluster_name]\n    .filter((c) => c != null)\n    .join('/');\n  method = method || 'PUT';\n  body = body || '';\n  querystring = snakeCaseKeys(null, snakeCase, querystring);\n\n  return this.transport.request({ method, path, body, querystring }, options, callback);\n};\n\nObject.defineProperties(SecurityApi.prototype, {\n  change_password: {\n    get() {\n      return this.changePassword;\n    },\n  },\n  create_action_group: {\n    get() {\n      return this.createActionGroup;\n    },\n  },\n  create_role: {\n    get() {\n      return this.createRole;\n    },\n  },\n  create_role_mapping: {\n    get() {\n      return this.createRoleMapping;\n    },\n  },\n  create_tenant: {\n    get() {\n      return this.createTenant;\n    },\n  },\n  create_user: {\n    get() {\n      return this.createUser;\n    },\n  },\n  delete_action_group: {\n    get() {\n      return this.deleteActionGroup;\n    },\n  },\n  delete_distinguished_names: {\n    get() {\n      return this.deleteDistinguishedNames;\n    },\n  },\n  delete_role: {\n    get() {\n      return this.deleteRole;\n    },\n  },\n  delete_role_mapping: {\n    get() {\n      return this.deleteRoleMapping;\n    },\n  },\n  delete_tenant: {\n    get() {\n      return this.deleteTenant;\n    },\n  },\n  delete_user: {\n    get() {\n      return this.deleteUser;\n    },\n  },\n  flush_cache: {\n    get() {\n      return this.flushCache;\n    },\n  },\n  get_account_details: {\n    get() {\n      return this.getAccountDetails;\n    },\n  },\n  get_action_group: {\n    get() {\n      return this.getActionGroup;\n    },\n  },\n  get_action_groups: {\n    get() {\n      return this.getActionGroups;\n    },\n  },\n  get_audit_configuration: {\n    get() {\n      return this.getAuditConfiguration;\n    },\n  },\n  get_certificates: {\n    get() {\n      return this.getCertificates;\n    },\n  },\n  get_configuration: {\n    get() {\n      return this.getConfiguration;\n    },\n  },\n  get_distinguished_names: {\n    get() {\n      return this.getDistinguishedNames;\n    },\n  },\n  get_role: {\n    get() {\n      return this.getRole;\n    },\n  },\n  get_role_mapping: {\n    get() {\n      return this.getRoleMapping;\n    },\n  },\n  get_role_mappings: {\n    get() {\n      return this.getRoleMappings;\n    },\n  },\n  get_roles: {\n    get() {\n      return this.getRoles;\n    },\n  },\n  get_tenant: {\n    get() {\n      return this.getTenant;\n    },\n  },\n  get_tenants: {\n    get() {\n      return this.getTenants;\n    },\n  },\n  get_user: {\n    get() {\n      return this.getUser;\n    },\n  },\n  get_users: {\n    get() {\n      return this.getUsers;\n    },\n  },\n  patch_action_group: {\n    get() {\n      return this.patchActionGroup;\n    },\n  },\n  patch_action_groups: {\n    get() {\n      return this.patchActionGroups;\n    },\n  },\n  patch_audit_configuration: {\n    get() {\n      return this.patchAuditConfiguration;\n    },\n  },\n  patch_configuration: {\n    get() {\n      return this.patchConfiguration;\n    },\n  },\n  patch_distinguished_names: {\n    get() {\n      return this.patchDistinguishedNames;\n    },\n  },\n  patch_role: {\n    get() {\n      return this.patchRole;\n    },\n  },\n  patch_role_mapping: {\n    get() {\n      return this.patchRoleMapping;\n    },\n  },\n  patch_role_mappings: {\n    get() {\n      return this.patchRoleMappings;\n    },\n  },\n  patch_roles: {\n    get() {\n      return this.patchRoles;\n    },\n  },\n  patch_tenant: {\n    get() {\n      return this.patchTenant;\n    },\n  },\n  patch_tenants: {\n    get() {\n      return this.patchTenants;\n    },\n  },\n  patch_user: {\n    get() {\n      return this.patchUser;\n    },\n  },\n  patch_users: {\n    get() {\n      return this.patchUsers;\n    },\n  },\n  reload_http_certificates: {\n    get() {\n      return this.reloadHttpCertificates;\n    },\n  },\n  reload_transport_certificates: {\n    get() {\n      return this.reloadTransportCertificates;\n    },\n  },\n  update_audit_configuration: {\n    get() {\n      return this.updateAuditConfiguration;\n    },\n  },\n  update_configuration: {\n    get() {\n      return this.updateConfiguration;\n    },\n  },\n  update_distinguished_names: {\n    get() {\n      return this.updateDistinguishedNames;\n    },\n  },\n});\nmodule.exports = SecurityApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}