{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst acceptedQuerystring = ['wait_for_active_shards', 'refresh', 'routing', 'timeout', 'version', 'version_type', 'pipeline', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  waitForActiveShards: 'wait_for_active_shards',\n  versionType: 'version_type',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\n/**\n * Adds a document with a predefined ID to an index.\n * <br/> See Also: {@link https://opensearch.org/docs/2.4/api-reference/document-apis/index-document/ OpenSearch - Index Document}\n *\n * @memberOf API-Document\n *\n * @param {Object} params\n * @param {string} params.index - Name of the index.\n * @param {string} params.id - A unique identifier to attach to the document.\n * @param {Object} params.body - The content of the document.\n * @param {number} [params.if_seq_no] - Only perform the index operation if the document has the specified sequence number.\n * @param {number} [params.if_primary_term] - Only perform the index operation if the document has the specified primary term.\n * @param {string} [params.pipeline] - Route the index operation to a certain pipeline.\n * @param {string} [params.routing] - value used to assign the index operation to a specific shard.\n * @param {string} [params.refresh=false] - If true, OpenSearch refreshes shards to make the operation visible to searching. Valid options are 'true', 'false', and 'wait_for', which tells OpenSearch to wait for a refresh before executing the operation.\n * @param {string} [params.timeout=1m] - How long to wait for a response from the cluster.\n * @param {number} [params.version] - The document’s version number.\n * @param {number} [params.version_type] - Specific version type (options: 'external' and 'external_gte')\n * @param {string} [params.wait_for_active_shards] - The number of active shards that must be available before OpenSearch processes the request. Default is 1 (only the primary shard). Set to all or a positive integer. Values greater than 1 require replicas. For example, if you specify a value of 3, the index must have two replicas distributed across two additional nodes for the operation to succeed.\n * @param {boolean} [params.require_alias=false] - Specifies whether the target index must be an index alias.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/2.4/api-reference/document-apis/index-document/#response Index Response}\n */\nfunction createApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    id,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (index != null && type != null && id != null) {\n    if (method == null) method = 'PUT';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id) + '/' + '_create';\n  } else {\n    if (method == null) method = 'PUT';\n    path = '/' + encodeURIComponent(index) + '/' + '_create' + '/' + encodeURIComponent(id);\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\nmodule.exports = createApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","waitForActiveShards","versionType","errorTrace","filterPath","createApi","params","options","callback","id","err","index","body","method","type","querystring","path","encodeURIComponent","request","transport","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/create.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils');\nconst acceptedQuerystring = [\n  'wait_for_active_shards',\n  'refresh',\n  'routing',\n  'timeout',\n  'version',\n  'version_type',\n  'pipeline',\n  'pretty',\n  'human',\n  'error_trace',\n  'source',\n  'filter_path',\n];\nconst snakeCase = {\n  waitForActiveShards: 'wait_for_active_shards',\n  versionType: 'version_type',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n};\n\n/**\n * Adds a document with a predefined ID to an index.\n * <br/> See Also: {@link https://opensearch.org/docs/2.4/api-reference/document-apis/index-document/ OpenSearch - Index Document}\n *\n * @memberOf API-Document\n *\n * @param {Object} params\n * @param {string} params.index - Name of the index.\n * @param {string} params.id - A unique identifier to attach to the document.\n * @param {Object} params.body - The content of the document.\n * @param {number} [params.if_seq_no] - Only perform the index operation if the document has the specified sequence number.\n * @param {number} [params.if_primary_term] - Only perform the index operation if the document has the specified primary term.\n * @param {string} [params.pipeline] - Route the index operation to a certain pipeline.\n * @param {string} [params.routing] - value used to assign the index operation to a specific shard.\n * @param {string} [params.refresh=false] - If true, OpenSearch refreshes shards to make the operation visible to searching. Valid options are 'true', 'false', and 'wait_for', which tells OpenSearch to wait for a refresh before executing the operation.\n * @param {string} [params.timeout=1m] - How long to wait for a response from the cluster.\n * @param {number} [params.version] - The document’s version number.\n * @param {number} [params.version_type] - Specific version type (options: 'external' and 'external_gte')\n * @param {string} [params.wait_for_active_shards] - The number of active shards that must be available before OpenSearch processes the request. Default is 1 (only the primary shard). Set to all or a positive integer. Values greater than 1 require replicas. For example, if you specify a value of 3, the index must have two replicas distributed across two additional nodes for the operation to succeed.\n * @param {boolean} [params.require_alias=false] - Specifies whether the target index must be an index alias.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/2.4/api-reference/document-apis/index-document/#response Index Response}\n */\nfunction createApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, id, index, type, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (index != null && type != null && id != null) {\n    if (method == null) method = 'PUT';\n    path =\n      '/' +\n      encodeURIComponent(index) +\n      '/' +\n      encodeURIComponent(type) +\n      '/' +\n      encodeURIComponent(id) +\n      '/' +\n      '_create';\n  } else {\n    if (method == null) method = 'PUT';\n    path = '/' + encodeURIComponent(index) + '/' + '_create' + '/' + encodeURIComponent(id);\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = createApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}