{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst acceptedQuerystring = ['ignore_unavailable', 'ignore_throttled', 'allow_no_indices', 'expand_wildcards', 'preference', 'routing', 'scroll', 'search_type', 'explain', 'profile', 'typed_keys', 'rest_total_hits_as_int', 'ccs_minimize_roundtrips', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  ignoreUnavailable: 'ignore_unavailable',\n  ignoreThrottled: 'ignore_throttled',\n  allowNoIndices: 'allow_no_indices',\n  expandWildcards: 'expand_wildcards',\n  searchType: 'search_type',\n  typedKeys: 'typed_keys',\n  restTotalHitsAsInt: 'rest_total_hits_as_int',\n  ccsMinimizeRoundtrips: 'ccs_minimize_roundtrips',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\n/**\n * Allows to use the Mustache language to pre-render a search definition.\n *\n * @memberOf API-Search\n *\n * @param {Object} params\n * @param {string} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {Object} params.body - The search definition template and its params\n * @param {boolean} [params.ignore_unavailable] - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {boolean} [params.ignore_throttled] - Whether specified concrete, expanded or aliased indices should be ignored when throttled\n * @param {boolean} [params.allow_no_indices] - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {string} [params.expand_wildcards] - Whether to expand wildcard expression to concrete indices that are open, closed or both. (options: open, closed, hidden, none, all)\n * @param {string} [params.preference] - Specify the node or shard the operation should be performed on (default: random)\n * @param {string} [params.routing] - A comma-separated list of specific routing values\n * @param {string} [params.scroll] - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {string} [params.search_type] - Search operation type (options: query_then_fetch, dfs_query_then_fetch)\n * @param {boolean} [params.explain] - Specify whether to return detailed information about score computation as part of a hit\n * @param {boolean} [params.profile] - Specify whether to profile the query execution\n * @param {boolean} [params.typed_keys] - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n * @param {boolean} [params.rest_total_hits_as_int] - Indicates whether hits.total should be rendered as an integer or an object in the rest search response\n * @param {boolean} [params.ccs_minimize_roundtrips] - Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nfunction searchTemplateApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (params.type != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (index != null && type != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_search' + '/' + 'template';\n  } else if (index != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_search' + '/' + 'template';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_search' + '/' + 'template';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\nmodule.exports = searchTemplateApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","ignoreUnavailable","ignoreThrottled","allowNoIndices","expandWildcards","searchType","typedKeys","restTotalHitsAsInt","ccsMinimizeRoundtrips","errorTrace","filterPath","searchTemplateApi","params","options","callback","body","err","type","index","method","querystring","path","encodeURIComponent","request","transport","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/search_template.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils');\nconst acceptedQuerystring = [\n  'ignore_unavailable',\n  'ignore_throttled',\n  'allow_no_indices',\n  'expand_wildcards',\n  'preference',\n  'routing',\n  'scroll',\n  'search_type',\n  'explain',\n  'profile',\n  'typed_keys',\n  'rest_total_hits_as_int',\n  'ccs_minimize_roundtrips',\n  'pretty',\n  'human',\n  'error_trace',\n  'source',\n  'filter_path',\n];\nconst snakeCase = {\n  ignoreUnavailable: 'ignore_unavailable',\n  ignoreThrottled: 'ignore_throttled',\n  allowNoIndices: 'allow_no_indices',\n  expandWildcards: 'expand_wildcards',\n  searchType: 'search_type',\n  typedKeys: 'typed_keys',\n  restTotalHitsAsInt: 'rest_total_hits_as_int',\n  ccsMinimizeRoundtrips: 'ccs_minimize_roundtrips',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n};\n\n/**\n * Allows to use the Mustache language to pre-render a search definition.\n *\n * @memberOf API-Search\n *\n * @param {Object} params\n * @param {string} params.index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n * @param {Object} params.body - The search definition template and its params\n * @param {boolean} [params.ignore_unavailable] - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n * @param {boolean} [params.ignore_throttled] - Whether specified concrete, expanded or aliased indices should be ignored when throttled\n * @param {boolean} [params.allow_no_indices] - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n * @param {string} [params.expand_wildcards] - Whether to expand wildcard expression to concrete indices that are open, closed or both. (options: open, closed, hidden, none, all)\n * @param {string} [params.preference] - Specify the node or shard the operation should be performed on (default: random)\n * @param {string} [params.routing] - A comma-separated list of specific routing values\n * @param {string} [params.scroll] - Specify how long a consistent view of the index should be maintained for scrolled search\n * @param {string} [params.search_type] - Search operation type (options: query_then_fetch, dfs_query_then_fetch)\n * @param {boolean} [params.explain] - Specify whether to return detailed information about score computation as part of a hit\n * @param {boolean} [params.profile] - Specify whether to profile the query execution\n * @param {boolean} [params.typed_keys] - Specify whether aggregation and suggester names should be prefixed by their respective types in the response\n * @param {boolean} [params.rest_total_hits_as_int] - Indicates whether hits.total should be rendered as an integer or an object in the rest search response\n * @param {boolean} [params.ccs_minimize_roundtrips] - Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nfunction searchTemplateApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (params.type != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let { method, body, index, type, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (index != null && type != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path =\n      '/' +\n      encodeURIComponent(index) +\n      '/' +\n      encodeURIComponent(type) +\n      '/' +\n      '_search' +\n      '/' +\n      'template';\n  } else if (index != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_search' + '/' + 'template';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_search' + '/' + 'template';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = searchTemplateApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}