{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\n/** @namespace API-Dangling-Indices */\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst acceptedQuerystring = ['accept_data_loss', 'timeout', 'cluster_manager_timeout', 'master_timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  acceptDataLoss: 'accept_data_loss',\n  clusterManagerTimeout: 'cluster_manager_timeout',\n  masterTimeout: 'master_timeout',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\nfunction DanglingIndicesApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n/**\n * Deletes the specified dangling index\n * <br/> See also: {@link https://opensearch.org/docs/latest/api-reference/index-apis/dangling-index/ OpenSearch - Dangling Indexes}\n * @memberOf API-Dangling-Indices\n *\n * @param {Object} params\n * @param {string} params.index_uuid - The UUID of the dangling index\n * @param {boolean} [params.accept_data_loss] - Must be set to true in order to delete the dangling index\n * @param {string} [params.timeout=30s] - Explicit operation timeout\n * @param {string} [params.cluster_manager_timeout] - Specify timeout for connection to cluster_manager\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nDanglingIndicesApi.prototype.deleteDanglingIndex = function danglingIndicesDeleteDanglingIndexApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.index_uuid == null && params.indexUuid == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index_uuid or indexUuid');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    indexUuid,\n    index_uuid,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_dangling' + '/' + encodeURIComponent(index_uuid || indexUuid);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Imports the specified dangling index\n * <br/> See also: {@link https://opensearch.org/docs/latest/api-reference/index-apis/dangling-index/ OpenSearch - Dangling Indexes}\n * @memberOf API-Dangling-Indices\n *\n * @param {Object} params\n * @param {string} params.index_uuid - The UUID of the dangling index\n * @param {boolean} [params.accept_data_loss] - Must be set to true in order to delete the dangling index\n * @param {string} [params.timeout=30s] - Explicit operation timeout\n * @param {string} [params.cluster_manager_timeout] - Specify timeout for connection to cluster_manager\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nDanglingIndicesApi.prototype.importDanglingIndex = function danglingIndicesImportDanglingIndexApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.index_uuid == null && params.indexUuid == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index_uuid or indexUuid');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    indexUuid,\n    index_uuid,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_dangling' + '/' + encodeURIComponent(index_uuid || indexUuid);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Retrieve all dangling indices.\n * <br/> See also: {@link https://opensearch.org/docs/latest/api-reference/index-apis/dangling-index/ OpenSearch - Dangling Indexes}\n * @memberOf API-Dangling-Indices\n *\n * @param {Object} params - (Unused)\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nDanglingIndicesApi.prototype.listDanglingIndices = function danglingIndicesListDanglingIndicesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_dangling';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\nObject.defineProperties(DanglingIndicesApi.prototype, {\n  delete_dangling_index: {\n    get() {\n      return this.deleteDanglingIndex;\n    }\n  },\n  import_dangling_index: {\n    get() {\n      return this.importDanglingIndex;\n    }\n  },\n  list_dangling_indices: {\n    get() {\n      return this.listDanglingIndices;\n    }\n  }\n});\nmodule.exports = DanglingIndicesApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","acceptDataLoss","clusterManagerTimeout","masterTimeout","errorTrace","filterPath","DanglingIndicesApi","transport","ConfigurationError","prototype","deleteDanglingIndex","danglingIndicesDeleteDanglingIndexApi","params","options","callback","index_uuid","indexUuid","err","method","body","querystring","path","encodeURIComponent","request","importDanglingIndex","danglingIndicesImportDanglingIndexApi","listDanglingIndices","danglingIndicesListDanglingIndicesApi","Object","defineProperties","delete_dangling_index","get","import_dangling_index","list_dangling_indices","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/dangling_indices.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\n/** @namespace API-Dangling-Indices */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils');\nconst acceptedQuerystring = [\n  'accept_data_loss',\n  'timeout',\n  'cluster_manager_timeout',\n  'master_timeout',\n  'pretty',\n  'human',\n  'error_trace',\n  'source',\n  'filter_path',\n];\nconst snakeCase = {\n  acceptDataLoss: 'accept_data_loss',\n  clusterManagerTimeout: 'cluster_manager_timeout',\n  masterTimeout: 'master_timeout',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n};\n\nfunction DanglingIndicesApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n/**\n * Deletes the specified dangling index\n * <br/> See also: {@link https://opensearch.org/docs/latest/api-reference/index-apis/dangling-index/ OpenSearch - Dangling Indexes}\n * @memberOf API-Dangling-Indices\n *\n * @param {Object} params\n * @param {string} params.index_uuid - The UUID of the dangling index\n * @param {boolean} [params.accept_data_loss] - Must be set to true in order to delete the dangling index\n * @param {string} [params.timeout=30s] - Explicit operation timeout\n * @param {string} [params.cluster_manager_timeout] - Specify timeout for connection to cluster_manager\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nDanglingIndicesApi.prototype.deleteDanglingIndex = function danglingIndicesDeleteDanglingIndexApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.index_uuid == null && params.indexUuid == null) {\n    const err = new this[kConfigurationError](\n      'Missing required parameter: index_uuid or indexUuid'\n    );\n    return handleError(err, callback);\n  }\n\n  let { method, body, indexUuid, index_uuid, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_dangling' + '/' + encodeURIComponent(index_uuid || indexUuid);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Imports the specified dangling index\n * <br/> See also: {@link https://opensearch.org/docs/latest/api-reference/index-apis/dangling-index/ OpenSearch - Dangling Indexes}\n * @memberOf API-Dangling-Indices\n *\n * @param {Object} params\n * @param {string} params.index_uuid - The UUID of the dangling index\n * @param {boolean} [params.accept_data_loss] - Must be set to true in order to delete the dangling index\n * @param {string} [params.timeout=30s] - Explicit operation timeout\n * @param {string} [params.cluster_manager_timeout] - Specify timeout for connection to cluster_manager\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nDanglingIndicesApi.prototype.importDanglingIndex = function danglingIndicesImportDanglingIndexApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.index_uuid == null && params.indexUuid == null) {\n    const err = new this[kConfigurationError](\n      'Missing required parameter: index_uuid or indexUuid'\n    );\n    return handleError(err, callback);\n  }\n\n  let { method, body, indexUuid, index_uuid, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_dangling' + '/' + encodeURIComponent(index_uuid || indexUuid);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Retrieve all dangling indices.\n * <br/> See also: {@link https://opensearch.org/docs/latest/api-reference/index-apis/dangling-index/ OpenSearch - Dangling Indexes}\n * @memberOf API-Dangling-Indices\n *\n * @param {Object} params - (Unused)\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nDanglingIndicesApi.prototype.listDanglingIndices = function danglingIndicesListDanglingIndicesApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_dangling';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(DanglingIndicesApi.prototype, {\n  delete_dangling_index: {\n    get() {\n      return this.deleteDanglingIndex;\n    },\n  },\n  import_dangling_index: {\n    get() {\n      return this.importDanglingIndex;\n    },\n  },\n  list_dangling_indices: {\n    get() {\n      return this.listDanglingIndices;\n    },\n  },\n});\n\nmodule.exports = DanglingIndicesApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}