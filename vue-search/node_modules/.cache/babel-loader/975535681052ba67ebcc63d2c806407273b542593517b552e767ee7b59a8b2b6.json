{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\n/** @namespace API-Snapshot */\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst acceptedQuerystring = ['cluster_manager_timeout', 'master_timeout', 'timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'wait_for_completion', 'verify', 'ignore_unavailable', 'index_details', 'include_repository', 'verbose', 'local', 'blob_count', 'concurrency', 'read_node_count', 'early_read_node_count', 'seed', 'rare_action_probability', 'max_blob_size', 'max_total_data_size', 'detailed', 'rarely_abort_writes'];\nconst snakeCase = {\n  clusterManagerTimeout: 'cluster_manager_timeout',\n  masterTimeout: 'master_timeout',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  waitForCompletion: 'wait_for_completion',\n  ignoreUnavailable: 'ignore_unavailable',\n  indexDetails: 'index_details',\n  includeRepository: 'include_repository',\n  blobCount: 'blob_count',\n  readNodeCount: 'read_node_count',\n  earlyReadNodeCount: 'early_read_node_count',\n  rareActionProbability: 'rare_action_probability',\n  maxBlobSize: 'max_blob_size',\n  maxTotalDataSize: 'max_total_data_size',\n  rarelyAbortWrites: 'rarely_abort_writes'\n};\nfunction SnapshotApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n/**\n * Removes stale data from repository.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} params.repository - A repository name\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n * @param {string} [params.timeout] - Explicit operation timeout\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.cleanupRepository = function snapshotCleanupRepositoryApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    repository,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_cleanup';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Clones indices from one snapshot into another snapshot in the same repository.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} params.repository - A repository name\n * @param {string} params.snapshot - The name of the snapshot to clone from\n * @param {Object} params.body - The snapshot clone definition\n * @param {string} [params.target_snapshot] - The name of the cloned snapshot to create\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.clone = function snapshotCloneApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot');\n    return handleError(err, callback);\n  }\n  if (params.target_snapshot == null && params.targetSnapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: target_snapshot or targetSnapshot');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if ((params.target_snapshot != null || params.targetSnapshot != null) && (params.snapshot == null || params.repository == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: snapshot, repository');\n    return handleError(err, callback);\n  } else if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    repository,\n    snapshot,\n    targetSnapshot,\n    target_snapshot,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot) + '/' + '_clone' + '/' + encodeURIComponent(target_snapshot || targetSnapshot);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Creates a snapshot in a repository.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} params.repository - A repository name\n * @param {string} params.snapshot - A snapshot name\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n * @param {boolean} [params.wait_for_completion] - Should this request wait until the operation has completed before returning\n * @param {Object} [params.body] - The snapshot definition\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.create = function snapshotCreateApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    repository,\n    snapshot,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Creates a repository.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} params.repository - A repository name\n * @param {Object} params.body - The repository definition\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n * @param {string} [params.timeout] - Explicit operation timeout\n * @param {boolean} [params.verify] - Whether to verify the repository after creation\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.createRepository = function snapshotCreateRepositoryApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    repository,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Deletes a snapshot.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} [params.repository] - A repository name\n * @param {string} [params.snapshot] - A snapshot name\n * @param {string} [params.master_timeout] - (DEPRECATED: use cluster_manager_timeout instead) Explicit operation timeout for connection to master node\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.delete = function snapshotDeleteApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    repository,\n    snapshot,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Deletes a repository.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} [params.repository] - Name of the snapshot repository to unregister. Wildcard (`*`) patterns are supported.\n * @param {string} [params.master_timeout] - (DEPRECATED: use cluster_manager_timeout instead) Explicit operation timeout for connection to master node\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n * @param {string} [params.timeout] - Explicit operation timeout\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.deleteRepository = function snapshotDeleteRepositoryApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    repository,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Returns information about a snapshot.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} [params.repository] - A repository name\n * @param {string} [params.snapshot] - A comma-separated list of snapshot names\n * @param {string} [params.master_timeout] - (DEPRECATED: use cluster_manager_timeout instead) Explicit operation timeout for connection to master node\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n * @param {boolean} [params.ignore_unavailable] - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n * @param {boolean} [params.index_details] - Whether to include details of each index in the snapshot, if those details are available. Defaults to false.\n * @param {boolean} [params.include_repository] - Whether to include the repository name in the snapshot info. Defaults to true.\n * @param {boolean} [params.verbose] - Whether to show verbose snapshot info or only show the basic info found in the repository index blob\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.get = function snapshotGetApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    repository,\n    snapshot,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Returns information about a snapshot.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} [params.repository] - A comma-separated list of repository names\n * @param {string} [params.master_timeout] - (DEPRECATED: use cluster_manager_timeout instead) Explicit operation timeout for connection to cluster_manager node\n * @param {boolean} [params.local] - Return local information, do not retrieve the state from cluster_manager node (default: false)\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.getRepository = function snapshotGetRepositoryApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    repository,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (repository != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_snapshot' + '/' + encodeURIComponent(repository);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_snapshot';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Analyzes a repository for correctness and performance\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} [params.repository] - A repository name\n * @param {number} [params.blob_count] - Number of blobs to create during the test. Defaults to 100.\n * @param {number} [params.concurrency] - Number of operations to run concurrently during the test. Defaults to 10.\n * @param {number} [params.read_node_count] - Number of nodes on which to read a blob after writing. Defaults to 10.\n * @param {number} [params.early_read_node_count] - Number of nodes on which to perform an early read on a blob, i.e. before writing has completed. Early reads are rare actions so the 'rare_action_probability' parameter is also relevant. Defaults to 2.\n * @param {number} [params.seed] - Seed for the random number generator used to create the test workload. Defaults to a random value.\n * @param {number} [params.rare_action_probability] - Probability of taking a rare action such as an early read or an overwrite. Defaults to 0.02.\n * @param {string} [params.max_blob_size] - Maximum size of a blob to create during the test, e.g '1gb' or '100mb'. Defaults to '10mb'.\n * @param {string} [params.max_total_data_size] - Maximum total size of all blobs to create during the test, e.g '1tb' or '100gb'. Defaults to '1gb'.\n * @param {string} [params.timeout] - Explicit operation timeout. Defaults to '30s'.\n * @param {boolean} [params.detailed] - Whether to return detailed results or a summary. Defaults to 'false' so that only the summary is returned.\n * @param {boolean} [params.rarely_abort_writes] - Whether to rarely abort writes before they complete. Defaults to 'true'.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.repositoryAnalyze = function snapshotRepositoryAnalyzeApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    repository,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_analyze';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Restores a snapshot.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} [params.repository] - A repository name\n * @param {string} [params.snapshot] - A snapshot name\n * @param {string} [params.master_timeout] - (DEPRECATED: use cluster_manager_timeout instead) Explicit operation timeout for connection to master node\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n * @param {boolean} [params.wait_for_completion] - Should this request wait until the operation has completed before returning\n * @param {Object} [params.body] - Details of what to restore\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.restore = function snapshotRestoreApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    repository,\n    snapshot,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot) + '/' + '_restore';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Returns information about the status of a snapshot.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} [params.repository] - A repository name\n * @param {string} [params.snapshot] - A comma-separated list of snapshot names\n * @param {string} [params.master_timeout] - (DEPRECATED: use cluster_manager_timeout instead) Explicit operation timeout for connection to master node\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n * @param {boolean} [params.ignore_unavailable] - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.status = function snapshotStatusApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required url components\n  if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    repository,\n    snapshot,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (repository != null && snapshot != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot) + '/' + '_status';\n  } else if (repository != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_status';\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_snapshot' + '/' + '_status';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Verifies a repository.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} [params.repository] - A repository name\n * @param {string} [params.master_timeout] - (DEPRECATED: use cluster_manager_timeout instead) Explicit operation timeout for connection to master node\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n * @param {string} [params.timeout] - Explicit operation timeout\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.verifyRepository = function snapshotVerifyRepositoryApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    repository,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_verify';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\nObject.defineProperties(SnapshotApi.prototype, {\n  cleanup_repository: {\n    get() {\n      return this.cleanupRepository;\n    }\n  },\n  create_repository: {\n    get() {\n      return this.createRepository;\n    }\n  },\n  delete_repository: {\n    get() {\n      return this.deleteRepository;\n    }\n  },\n  get_repository: {\n    get() {\n      return this.getRepository;\n    }\n  },\n  repository_analyze: {\n    get() {\n      return this.repositoryAnalyze;\n    }\n  },\n  verify_repository: {\n    get() {\n      return this.verifyRepository;\n    }\n  }\n});\nmodule.exports = SnapshotApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","clusterManagerTimeout","masterTimeout","errorTrace","filterPath","waitForCompletion","ignoreUnavailable","indexDetails","includeRepository","blobCount","readNodeCount","earlyReadNodeCount","rareActionProbability","maxBlobSize","maxTotalDataSize","rarelyAbortWrites","SnapshotApi","transport","ConfigurationError","prototype","cleanupRepository","snapshotCleanupRepositoryApi","params","options","callback","repository","err","method","body","querystring","path","encodeURIComponent","request","clone","snapshotCloneApi","snapshot","target_snapshot","targetSnapshot","create","snapshotCreateApi","createRepository","snapshotCreateRepositoryApi","delete","snapshotDeleteApi","deleteRepository","snapshotDeleteRepositoryApi","get","snapshotGetApi","getRepository","snapshotGetRepositoryApi","repositoryAnalyze","snapshotRepositoryAnalyzeApi","restore","snapshotRestoreApi","status","snapshotStatusApi","verifyRepository","snapshotVerifyRepositoryApi","Object","defineProperties","cleanup_repository","create_repository","delete_repository","get_repository","repository_analyze","verify_repository","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/snapshot.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\n/** @namespace API-Snapshot */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils');\nconst acceptedQuerystring = [\n  'cluster_manager_timeout',\n  'master_timeout',\n  'timeout',\n  'pretty',\n  'human',\n  'error_trace',\n  'source',\n  'filter_path',\n  'wait_for_completion',\n  'verify',\n  'ignore_unavailable',\n  'index_details',\n  'include_repository',\n  'verbose',\n  'local',\n  'blob_count',\n  'concurrency',\n  'read_node_count',\n  'early_read_node_count',\n  'seed',\n  'rare_action_probability',\n  'max_blob_size',\n  'max_total_data_size',\n  'detailed',\n  'rarely_abort_writes',\n];\nconst snakeCase = {\n  clusterManagerTimeout: 'cluster_manager_timeout',\n  masterTimeout: 'master_timeout',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  waitForCompletion: 'wait_for_completion',\n  ignoreUnavailable: 'ignore_unavailable',\n  indexDetails: 'index_details',\n  includeRepository: 'include_repository',\n  blobCount: 'blob_count',\n  readNodeCount: 'read_node_count',\n  earlyReadNodeCount: 'early_read_node_count',\n  rareActionProbability: 'rare_action_probability',\n  maxBlobSize: 'max_blob_size',\n  maxTotalDataSize: 'max_total_data_size',\n  rarelyAbortWrites: 'rarely_abort_writes',\n};\n\nfunction SnapshotApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n/**\n * Removes stale data from repository.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} params.repository - A repository name\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n * @param {string} [params.timeout] - Explicit operation timeout\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.cleanupRepository = function snapshotCleanupRepositoryApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n\n  let { method, body, repository, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_cleanup';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Clones indices from one snapshot into another snapshot in the same repository.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} params.repository - A repository name\n * @param {string} params.snapshot - The name of the snapshot to clone from\n * @param {Object} params.body - The snapshot clone definition\n * @param {string} [params.target_snapshot] - The name of the cloned snapshot to create\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.clone = function snapshotCloneApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot');\n    return handleError(err, callback);\n  }\n  if (params.target_snapshot == null && params.targetSnapshot == null) {\n    const err = new this[kConfigurationError](\n      'Missing required parameter: target_snapshot or targetSnapshot'\n    );\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (\n    (params.target_snapshot != null || params.targetSnapshot != null) &&\n    (params.snapshot == null || params.repository == null)\n  ) {\n    const err = new this[kConfigurationError](\n      'Missing required parameter of the url: snapshot, repository'\n    );\n    return handleError(err, callback);\n  } else if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n\n  let { method, body, repository, snapshot, targetSnapshot, target_snapshot, ...querystring } =\n    params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'PUT';\n  path =\n    '/' +\n    '_snapshot' +\n    '/' +\n    encodeURIComponent(repository) +\n    '/' +\n    encodeURIComponent(snapshot) +\n    '/' +\n    '_clone' +\n    '/' +\n    encodeURIComponent(target_snapshot || targetSnapshot);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Creates a snapshot in a repository.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} params.repository - A repository name\n * @param {string} params.snapshot - A snapshot name\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n * @param {boolean} [params.wait_for_completion] - Should this request wait until the operation has completed before returning\n * @param {Object} [params.body] - The snapshot definition\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.create = function snapshotCreateApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n\n  let { method, body, repository, snapshot, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'PUT';\n  path =\n    '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Creates a repository.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} params.repository - A repository name\n * @param {Object} params.body - The repository definition\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n * @param {string} [params.timeout] - Explicit operation timeout\n * @param {boolean} [params.verify] - Whether to verify the repository after creation\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.createRepository = function snapshotCreateRepositoryApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let { method, body, repository, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Deletes a snapshot.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} [params.repository] - A repository name\n * @param {string} [params.snapshot] - A snapshot name\n * @param {string} [params.master_timeout] - (DEPRECATED: use cluster_manager_timeout instead) Explicit operation timeout for connection to master node\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.delete = function snapshotDeleteApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n\n  let { method, body, repository, snapshot, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path =\n    '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Deletes a repository.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} [params.repository] - Name of the snapshot repository to unregister. Wildcard (`*`) patterns are supported.\n * @param {string} [params.master_timeout] - (DEPRECATED: use cluster_manager_timeout instead) Explicit operation timeout for connection to master node\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n * @param {string} [params.timeout] - Explicit operation timeout\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.deleteRepository = function snapshotDeleteRepositoryApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n\n  let { method, body, repository, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Returns information about a snapshot.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} [params.repository] - A repository name\n * @param {string} [params.snapshot] - A comma-separated list of snapshot names\n * @param {string} [params.master_timeout] - (DEPRECATED: use cluster_manager_timeout instead) Explicit operation timeout for connection to master node\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n * @param {boolean} [params.ignore_unavailable] - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n * @param {boolean} [params.index_details] - Whether to include details of each index in the snapshot, if those details are available. Defaults to false.\n * @param {boolean} [params.include_repository] - Whether to include the repository name in the snapshot info. Defaults to true.\n * @param {boolean} [params.verbose] - Whether to show verbose snapshot info or only show the basic info found in the repository index blob\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.get = function snapshotGetApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n\n  let { method, body, repository, snapshot, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'GET';\n  path =\n    '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Returns information about a snapshot.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} [params.repository] - A comma-separated list of repository names\n * @param {string} [params.master_timeout] - (DEPRECATED: use cluster_manager_timeout instead) Explicit operation timeout for connection to cluster_manager node\n * @param {boolean} [params.local] - Return local information, do not retrieve the state from cluster_manager node (default: false)\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.getRepository = function snapshotGetRepositoryApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, repository, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (repository != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_snapshot' + '/' + encodeURIComponent(repository);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_snapshot';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Analyzes a repository for correctness and performance\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} [params.repository] - A repository name\n * @param {number} [params.blob_count] - Number of blobs to create during the test. Defaults to 100.\n * @param {number} [params.concurrency] - Number of operations to run concurrently during the test. Defaults to 10.\n * @param {number} [params.read_node_count] - Number of nodes on which to read a blob after writing. Defaults to 10.\n * @param {number} [params.early_read_node_count] - Number of nodes on which to perform an early read on a blob, i.e. before writing has completed. Early reads are rare actions so the 'rare_action_probability' parameter is also relevant. Defaults to 2.\n * @param {number} [params.seed] - Seed for the random number generator used to create the test workload. Defaults to a random value.\n * @param {number} [params.rare_action_probability] - Probability of taking a rare action such as an early read or an overwrite. Defaults to 0.02.\n * @param {string} [params.max_blob_size] - Maximum size of a blob to create during the test, e.g '1gb' or '100mb'. Defaults to '10mb'.\n * @param {string} [params.max_total_data_size] - Maximum total size of all blobs to create during the test, e.g '1tb' or '100gb'. Defaults to '1gb'.\n * @param {string} [params.timeout] - Explicit operation timeout. Defaults to '30s'.\n * @param {boolean} [params.detailed] - Whether to return detailed results or a summary. Defaults to 'false' so that only the summary is returned.\n * @param {boolean} [params.rarely_abort_writes] - Whether to rarely abort writes before they complete. Defaults to 'true'.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.repositoryAnalyze = function snapshotRepositoryAnalyzeApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n\n  let { method, body, repository, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_analyze';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Restores a snapshot.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} [params.repository] - A repository name\n * @param {string} [params.snapshot] - A snapshot name\n * @param {string} [params.master_timeout] - (DEPRECATED: use cluster_manager_timeout instead) Explicit operation timeout for connection to master node\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n * @param {boolean} [params.wait_for_completion] - Should this request wait until the operation has completed before returning\n * @param {Object} [params.body] - Details of what to restore\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.restore = function snapshotRestoreApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n\n  let { method, body, repository, snapshot, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'POST';\n  path =\n    '/' +\n    '_snapshot' +\n    '/' +\n    encodeURIComponent(repository) +\n    '/' +\n    encodeURIComponent(snapshot) +\n    '/' +\n    '_restore';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Returns information about the status of a snapshot.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} [params.repository] - A repository name\n * @param {string} [params.snapshot] - A comma-separated list of snapshot names\n * @param {string} [params.master_timeout] - (DEPRECATED: use cluster_manager_timeout instead) Explicit operation timeout for connection to master node\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n * @param {boolean} [params.ignore_unavailable] - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.status = function snapshotStatusApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required url components\n  if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n\n  let { method, body, repository, snapshot, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (repository != null && snapshot != null) {\n    if (method == null) method = 'GET';\n    path =\n      '/' +\n      '_snapshot' +\n      '/' +\n      encodeURIComponent(repository) +\n      '/' +\n      encodeURIComponent(snapshot) +\n      '/' +\n      '_status';\n  } else if (repository != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_status';\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_snapshot' + '/' + '_status';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Verifies a repository.\n *\n * @memberOf API-Snapshot\n *\n * @param {Object} params\n * @param {string} [params.repository] - A repository name\n * @param {string} [params.master_timeout] - (DEPRECATED: use cluster_manager_timeout instead) Explicit operation timeout for connection to master node\n * @param {string} [params.cluster_manager_timeout] - Explicit operation timeout for connection to cluster_manager node\n * @param {string} [params.timeout] - Explicit operation timeout\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nSnapshotApi.prototype.verifyRepository = function snapshotVerifyRepositoryApi(\n  params,\n  options,\n  callback\n) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n\n  let { method, body, repository, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_verify';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(SnapshotApi.prototype, {\n  cleanup_repository: {\n    get() {\n      return this.cleanupRepository;\n    },\n  },\n  create_repository: {\n    get() {\n      return this.createRepository;\n    },\n  },\n  delete_repository: {\n    get() {\n      return this.deleteRepository;\n    },\n  },\n  get_repository: {\n    get() {\n      return this.getRepository;\n    },\n  },\n  repository_analyze: {\n    get() {\n      return this.repositoryAnalyze;\n    },\n  },\n  verify_repository: {\n    get() {\n      return this.verifyRepository;\n    },\n  },\n});\n\nmodule.exports = SnapshotApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}