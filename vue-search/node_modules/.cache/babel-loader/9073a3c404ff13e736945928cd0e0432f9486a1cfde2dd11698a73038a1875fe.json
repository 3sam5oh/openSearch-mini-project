{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\n/** @namespace API-CAT */\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst acceptedQuerystring = ['format', 'local', 'h', 'help', 's', 'v', 'expand_wildcards', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'bytes', 'cluster_manager_timeout', 'master_timeout', 'fields', 'time', 'ts', 'health', 'pri', 'include_unloaded_segments', 'allow_no_match', 'allow_no_datafeeds', 'allow_no_jobs', 'from', 'size', 'full_id', 'include_bootstrap', 'active_only', 'detailed', 'index', 'ignore_unavailable', 'nodes', 'actions', 'parent_task_id', 'pri'];\nconst snakeCase = {\n  expandWildcards: 'expand_wildcards',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  clusterManagerTimeout: 'cluster_manager_timeout',\n  masterTimeout: 'master_timeout',\n  includeUnloadedSegments: 'include_unloaded_segments',\n  allowNoMatch: 'allow_no_match',\n  allowNoDatafeeds: 'allow_no_datafeeds',\n  allowNoJobs: 'allow_no_jobs',\n  fullId: 'full_id',\n  includeBootstrap: 'include_bootstrap',\n  activeOnly: 'active_only',\n  ignoreUnavailable: 'ignore_unavailable',\n  parentTaskId: 'parent_task_id'\n};\nfunction CatApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n/**\n * The CAT aliases operation lists the mapping of aliases to indices, plus routing and filtering information.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-aliases/ OpenSearch - CAT aliases}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.name] - To limit the information to specific aliases, provide the alias names seperated by commas.\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster manager node.\n * @param {string} [params.expand_wildcards=open] - Expands wildcard expressions to concrete indices. Combine multiple values with commas. Supported values are 'all', 'open', 'closed', 'hidden', and 'none'. Default is 'open'.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-aliases/#response CAT aliases Response}\n */\nCatApi.prototype.aliases = function catAliasesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'aliases' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'aliases';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT allocation operation lists the allocation of disk space for indices and the number of shards on each node.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-allocation/ OpenSearch - CAT allocation}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.node_id] - To limit the information to specific nodes, provide the node names seperated by commas.\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n * @param {string} [params.bytes] - Specify the units for byte size. For example, '7kb' or '6gb'.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-allocation/#response CAT allocation Response}\n */\nCatApi.prototype.allocation = function catAllocationApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    nodeId,\n    node_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'allocation' + '/' + encodeURIComponent(node_id || nodeId);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'allocation';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT count operation lists the number of documents in your cluster.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-count/ OpenSearch - CAT count}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.index] - To see the number of documents in specific indices or aliases, provide the index/alias names seperated by commas.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-count/#response CAT count Response}\n */\nCatApi.prototype.count = function catCountApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'count' + '/' + encodeURIComponent(index);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'count';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT fielddata operation lists the memory size used by each field per node.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-field-data/ OpenSearch - CAT fielddata}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.fields] - To limit the information to specific fields, provide the field names seperated by commas.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-field-data/#response CAT fielddata Response}\n */\nCatApi.prototype.fielddata = function catFielddataApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    fields,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (fields != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'fielddata' + '/' + encodeURIComponent(fields);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'fielddata';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT health operation lists the status of the cluster, how long the cluster has been up, the number of nodes,\n * and other useful information that helps you analyze the health of your cluster.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-health/ OpenSearch - CAT health}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.time] - Specify the units for time. For example, '5d' or '7h'.\n * @param {boolean} [params.ts=true] - If true, returns HH:MM:SS and Unix epoch timestamps.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-health/#response CAT health Response}\n */\nCatApi.prototype.health = function catHealthApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'health';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * See the available operations in the CAT API\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/index OpenSearch - CAT}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - (ignored)\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nCatApi.prototype.help = function catHelpApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT indices operation lists information related to indices—how much disk space they are using, how many shards they have, their health status, and so on.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-indices/ OpenSearch - CAT indices}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.index] - To limit the information to specific indices, provide the index names seperated by commas.\n * @param {string} [params.bytes] - Specify the units for byte size. For example, '7kb' or '6gb'.\n * @param {string} [params.health] - Limit indices based on their health status. Supported values are 'green', 'yellow', and 'red'.\n * @param {boolean} [params.include_unloaded_segments=false] - Whether to include information from segments not loaded into memory.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n * @param {boolean} [params.pri=false] - Whether to return information only from the primary shards.\n * @param {string} [params.time] - Specify the units for time. For example, '5d' or '7h'.\n * @param {string} [params.expand_wildcards=open] - Expands wildcard expressions to concrete indices. Combine multiple values with commas. Supported values are 'all', 'open', 'closed', 'hidden', and 'none'.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-indices/#response CAT indices Response}\n */\nCatApi.prototype.indices = function catIndicesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'indices' + '/' + encodeURIComponent(index);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'indices';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT cluster manager operation lists information that helps identify the elected cluster manager node.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-cluster_manager/ OpenSearch - CAT cluster manager}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters}\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-cluster_manager/#response CAT cluster manager Response}\n */\nCatApi.prototype.cluster_manager = function catClusterManagerApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'cluster_manager';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * // TODO: delete CatApi.prototype.master when it is removed from OpenSearch\n * @deprecated use CatApi.prototype.cluster_manager instead\n */\nCatApi.prototype.master = function catMasterApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'master';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT nodeattrs operation lists the attributes of custom nodes.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-nodeattrs/ OpenSearch - CAT aliases}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-nodeattrs/#response CAT nodeattrs Response}\n */\nCatApi.prototype.nodeattrs = function catNodeattrsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'nodeattrs';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT nodes operation lists node-level information, including node roles and load metrics.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-nodes/ OpenSearch - CAT nodes}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.bytes] - Specify the units for byte size. For example, '7kb' or '6gb'.\n * @param {boolean} [params.full_id=false] - If true, return the full node ID. If false, return the shortened node ID.\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster_manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n * @param {string} [params.time] - Specify the units for time. For example, '5d' or '7h'.\n * @param {boolean} [params.include_unloaded_segments=false] - Whether to include information from segments not loaded into memory.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-nodes/#response CAT nodes Response}\n */\nCatApi.prototype.nodes = function catNodesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'nodes';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT pending tasks operation lists the progress of all pending tasks, including task priority and time in queue.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-pending-tasks/ OpenSearch - CAT pending tasks}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster_manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n * @param {string} [params.time] - Specify the units for time. For example, '5d' or '7h'.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-pending-tasks/#response CAT pending tasks Response}\n */\nCatApi.prototype.pendingTasks = function catPendingTasksApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'pending_tasks';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT plugins operation lists the names, components, and versions of the installed plugins.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-plugins/ OpenSearch - CAT plugins}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster_manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-plugins/#response CAT plugins Response}\n */\nCatApi.prototype.plugins = function catPluginsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'plugins';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT recovery operation lists all completed and ongoing index and shard recoveries.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-recovery/ OpenSearch - CAT recovery}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.bytes] - Specify the units for byte size. For example, '7kb' or '6gb'.\n * @param {string} [params.time] - Specify the units for time. For example, '5d' or '7h'.\n * @param {boolean} [params.active_only=false] - Whether to only include ongoing shard recoveries.\n * @param {boolean} [params.detailed=false] - Whether to only include ongoing shard recoveries.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-recovery/#response CAT recovery Response}\n */\nCatApi.prototype.recovery = function catRecoveryApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'recovery' + '/' + encodeURIComponent(index);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'recovery';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT repositories operation lists all completed and ongoing index and shard recoveries.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-repositories/ OpenSearch - CAT repositories}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster_manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-repositories/#response CAT repositories Response}\n */\nCatApi.prototype.repositories = function catRepositoriesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'repositories';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The cat segments operation lists Lucene segment-level information for each index.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-segments/ OpenSearch - CAT segments}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.index] - To see only the information about segments of specific indices, provide the index names seperated by commas.\n * @param {string} [params.bytes] - Specify the units for byte size. For example, '7kb' or '6gb'.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-segments/#response CAT segments Response}\n */\nCatApi.prototype.segments = function catSegmentsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'segments' + '/' + encodeURIComponent(index);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'segments';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT shards operation lists the state of all primary and replica shards and how they are distributed.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-shards/ OpenSearch - CAT shards}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.index] - To see only the information about shards of specific indices, provide the index names seperated by commas.\n * @param {string} [params.bytes] - Specify the units for byte size. For example, '7kb' or '6gb'.\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster_manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n * @param {string} [params.time] - Specify the units for time. For example, '5d' or '7h'.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-shards/#response CAT shards Response}\n */\nCatApi.prototype.shards = function catShardsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'shards' + '/' + encodeURIComponent(index);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'shards';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT snapshots operation lists all snapshots for a repository.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-snapshots/ OpenSearch - CAT snapshots}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n * @param {string} [params.time] - Specify the units for time. For example, '5d' or '7h'.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-snapshots/#response CAT snapshots Response}\n */\nCatApi.prototype.snapshots = function catSnapshotsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    repository,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (repository != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'snapshots' + '/' + encodeURIComponent(repository);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'snapshots';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT tasks operation lists the progress of all tasks currently running on your cluster.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-tasks/ OpenSearch - CAT tasks}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.nodes] - A comma-separated list of node IDs or names to limit the returned information. Use '_local' to return information from the node you’re connecting to, specify the node name to get information from specific nodes, or keep the parameter empty to get information from all nodes.\n * @param {string} [params.time] - Specify the units for time. For example, '5d' or '7h'.\n * @param {boolean} [params.detailed=false] - Returns detailed task information.\n * @param {string} [params.parent_task_id] - Returns tasks with a specified parent task ID (node_id:task_number). Keep empty or set to -1 to return all.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-tasks/#response CAT tasks Response}\n */\nCatApi.prototype.tasks = function catTasksApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'tasks';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT templates operation lists the names, patterns, order numbers, and version numbers of index templates.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-templates/ OpenSearch - CAT templates}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {boolean} [params.name] - If you want to limit it to a specific template or pattern, provide the template name or pattern.\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-templates/#response CAT templates Response}\n */\nCatApi.prototype.templates = function catTemplatesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'templates' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'templates';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT thread pool operation lists the active, queued, and rejected threads of different thread pools on each node.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-thread-pool/ OpenSearch - CAT thread pool}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-thread-pool/#response CAT thread pool Response}\n */\nCatApi.prototype.threadPool = function catThreadPoolApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    threadPoolPatterns,\n    thread_pool_patterns,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if ((thread_pool_patterns || threadPoolPatterns) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'thread_pool' + '/' + encodeURIComponent(thread_pool_patterns || threadPoolPatterns);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'thread_pool';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\nObject.defineProperties(CatApi.prototype, {\n  pending_tasks: {\n    get() {\n      return this.pendingTasks;\n    }\n  },\n  thread_pool: {\n    get() {\n      return this.threadPool;\n    }\n  }\n});\nmodule.exports = CatApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","expandWildcards","errorTrace","filterPath","clusterManagerTimeout","masterTimeout","includeUnloadedSegments","allowNoMatch","allowNoDatafeeds","allowNoJobs","fullId","includeBootstrap","activeOnly","ignoreUnavailable","parentTaskId","CatApi","transport","ConfigurationError","prototype","aliases","catAliasesApi","params","options","callback","method","body","name","querystring","path","encodeURIComponent","request","allocation","catAllocationApi","nodeId","node_id","count","catCountApi","index","fielddata","catFielddataApi","fields","health","catHealthApi","help","catHelpApi","indices","catIndicesApi","cluster_manager","catClusterManagerApi","master","catMasterApi","nodeattrs","catNodeattrsApi","nodes","catNodesApi","pendingTasks","catPendingTasksApi","plugins","catPluginsApi","recovery","catRecoveryApi","repositories","catRepositoriesApi","segments","catSegmentsApi","shards","catShardsApi","snapshots","catSnapshotsApi","repository","tasks","catTasksApi","templates","catTemplatesApi","threadPool","catThreadPoolApi","threadPoolPatterns","thread_pool_patterns","Object","defineProperties","pending_tasks","get","thread_pool","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/cat.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\n/** @namespace API-CAT */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils');\nconst acceptedQuerystring = [\n  'format',\n  'local',\n  'h',\n  'help',\n  's',\n  'v',\n  'expand_wildcards',\n  'pretty',\n  'human',\n  'error_trace',\n  'source',\n  'filter_path',\n  'bytes',\n  'cluster_manager_timeout',\n  'master_timeout',\n  'fields',\n  'time',\n  'ts',\n  'health',\n  'pri',\n  'include_unloaded_segments',\n  'allow_no_match',\n  'allow_no_datafeeds',\n  'allow_no_jobs',\n  'from',\n  'size',\n  'full_id',\n  'include_bootstrap',\n  'active_only',\n  'detailed',\n  'index',\n  'ignore_unavailable',\n  'nodes',\n  'actions',\n  'parent_task_id',\n  'pri',\n];\nconst snakeCase = {\n  expandWildcards: 'expand_wildcards',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  clusterManagerTimeout: 'cluster_manager_timeout',\n  masterTimeout: 'master_timeout',\n  includeUnloadedSegments: 'include_unloaded_segments',\n  allowNoMatch: 'allow_no_match',\n  allowNoDatafeeds: 'allow_no_datafeeds',\n  allowNoJobs: 'allow_no_jobs',\n  fullId: 'full_id',\n  includeBootstrap: 'include_bootstrap',\n  activeOnly: 'active_only',\n  ignoreUnavailable: 'ignore_unavailable',\n  parentTaskId: 'parent_task_id',\n};\n\nfunction CatApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n/**\n * The CAT aliases operation lists the mapping of aliases to indices, plus routing and filtering information.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-aliases/ OpenSearch - CAT aliases}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.name] - To limit the information to specific aliases, provide the alias names seperated by commas.\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster manager node.\n * @param {string} [params.expand_wildcards=open] - Expands wildcard expressions to concrete indices. Combine multiple values with commas. Supported values are 'all', 'open', 'closed', 'hidden', and 'none'. Default is 'open'.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-aliases/#response CAT aliases Response}\n */\nCatApi.prototype.aliases = function catAliasesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, name, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'aliases' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'aliases';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT allocation operation lists the allocation of disk space for indices and the number of shards on each node.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-allocation/ OpenSearch - CAT allocation}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.node_id] - To limit the information to specific nodes, provide the node names seperated by commas.\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n * @param {string} [params.bytes] - Specify the units for byte size. For example, '7kb' or '6gb'.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-allocation/#response CAT allocation Response}\n */\nCatApi.prototype.allocation = function catAllocationApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, nodeId, node_id, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'allocation' + '/' + encodeURIComponent(node_id || nodeId);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'allocation';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT count operation lists the number of documents in your cluster.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-count/ OpenSearch - CAT count}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.index] - To see the number of documents in specific indices or aliases, provide the index/alias names seperated by commas.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-count/#response CAT count Response}\n */\nCatApi.prototype.count = function catCountApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, index, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'count' + '/' + encodeURIComponent(index);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'count';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT fielddata operation lists the memory size used by each field per node.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-field-data/ OpenSearch - CAT fielddata}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.fields] - To limit the information to specific fields, provide the field names seperated by commas.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-field-data/#response CAT fielddata Response}\n */\nCatApi.prototype.fielddata = function catFielddataApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, fields, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (fields != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'fielddata' + '/' + encodeURIComponent(fields);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'fielddata';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT health operation lists the status of the cluster, how long the cluster has been up, the number of nodes,\n * and other useful information that helps you analyze the health of your cluster.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-health/ OpenSearch - CAT health}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.time] - Specify the units for time. For example, '5d' or '7h'.\n * @param {boolean} [params.ts=true] - If true, returns HH:MM:SS and Unix epoch timestamps.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-health/#response CAT health Response}\n */\nCatApi.prototype.health = function catHealthApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'health';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * See the available operations in the CAT API\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/index OpenSearch - CAT}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - (ignored)\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nCatApi.prototype.help = function catHelpApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT indices operation lists information related to indices—how much disk space they are using, how many shards they have, their health status, and so on.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-indices/ OpenSearch - CAT indices}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.index] - To limit the information to specific indices, provide the index names seperated by commas.\n * @param {string} [params.bytes] - Specify the units for byte size. For example, '7kb' or '6gb'.\n * @param {string} [params.health] - Limit indices based on their health status. Supported values are 'green', 'yellow', and 'red'.\n * @param {boolean} [params.include_unloaded_segments=false] - Whether to include information from segments not loaded into memory.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n * @param {boolean} [params.pri=false] - Whether to return information only from the primary shards.\n * @param {string} [params.time] - Specify the units for time. For example, '5d' or '7h'.\n * @param {string} [params.expand_wildcards=open] - Expands wildcard expressions to concrete indices. Combine multiple values with commas. Supported values are 'all', 'open', 'closed', 'hidden', and 'none'.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-indices/#response CAT indices Response}\n */\nCatApi.prototype.indices = function catIndicesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, index, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'indices' + '/' + encodeURIComponent(index);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'indices';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT cluster manager operation lists information that helps identify the elected cluster manager node.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-cluster_manager/ OpenSearch - CAT cluster manager}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters}\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-cluster_manager/#response CAT cluster manager Response}\n */\nCatApi.prototype.cluster_manager = function catClusterManagerApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'cluster_manager';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * // TODO: delete CatApi.prototype.master when it is removed from OpenSearch\n * @deprecated use CatApi.prototype.cluster_manager instead\n */\nCatApi.prototype.master = function catMasterApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'master';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT nodeattrs operation lists the attributes of custom nodes.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-nodeattrs/ OpenSearch - CAT aliases}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-nodeattrs/#response CAT nodeattrs Response}\n */\nCatApi.prototype.nodeattrs = function catNodeattrsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'nodeattrs';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT nodes operation lists node-level information, including node roles and load metrics.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-nodes/ OpenSearch - CAT nodes}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.bytes] - Specify the units for byte size. For example, '7kb' or '6gb'.\n * @param {boolean} [params.full_id=false] - If true, return the full node ID. If false, return the shortened node ID.\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster_manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n * @param {string} [params.time] - Specify the units for time. For example, '5d' or '7h'.\n * @param {boolean} [params.include_unloaded_segments=false] - Whether to include information from segments not loaded into memory.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-nodes/#response CAT nodes Response}\n */\nCatApi.prototype.nodes = function catNodesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'nodes';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT pending tasks operation lists the progress of all pending tasks, including task priority and time in queue.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-pending-tasks/ OpenSearch - CAT pending tasks}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster_manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n * @param {string} [params.time] - Specify the units for time. For example, '5d' or '7h'.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-pending-tasks/#response CAT pending tasks Response}\n */\nCatApi.prototype.pendingTasks = function catPendingTasksApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'pending_tasks';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT plugins operation lists the names, components, and versions of the installed plugins.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-plugins/ OpenSearch - CAT plugins}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster_manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-plugins/#response CAT plugins Response}\n */\nCatApi.prototype.plugins = function catPluginsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'plugins';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT recovery operation lists all completed and ongoing index and shard recoveries.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-recovery/ OpenSearch - CAT recovery}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.bytes] - Specify the units for byte size. For example, '7kb' or '6gb'.\n * @param {string} [params.time] - Specify the units for time. For example, '5d' or '7h'.\n * @param {boolean} [params.active_only=false] - Whether to only include ongoing shard recoveries.\n * @param {boolean} [params.detailed=false] - Whether to only include ongoing shard recoveries.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-recovery/#response CAT recovery Response}\n */\nCatApi.prototype.recovery = function catRecoveryApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, index, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'recovery' + '/' + encodeURIComponent(index);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'recovery';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT repositories operation lists all completed and ongoing index and shard recoveries.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-repositories/ OpenSearch - CAT repositories}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster_manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-repositories/#response CAT repositories Response}\n */\nCatApi.prototype.repositories = function catRepositoriesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'repositories';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The cat segments operation lists Lucene segment-level information for each index.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-segments/ OpenSearch - CAT segments}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.index] - To see only the information about segments of specific indices, provide the index names seperated by commas.\n * @param {string} [params.bytes] - Specify the units for byte size. For example, '7kb' or '6gb'.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-segments/#response CAT segments Response}\n */\nCatApi.prototype.segments = function catSegmentsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, index, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'segments' + '/' + encodeURIComponent(index);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'segments';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT shards operation lists the state of all primary and replica shards and how they are distributed.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-shards/ OpenSearch - CAT shards}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.index] - To see only the information about shards of specific indices, provide the index names seperated by commas.\n * @param {string} [params.bytes] - Specify the units for byte size. For example, '7kb' or '6gb'.\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster_manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n * @param {string} [params.time] - Specify the units for time. For example, '5d' or '7h'.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-shards/#response CAT shards Response}\n */\nCatApi.prototype.shards = function catShardsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, index, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'shards' + '/' + encodeURIComponent(index);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'shards';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT snapshots operation lists all snapshots for a repository.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-snapshots/ OpenSearch - CAT snapshots}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n * @param {string} [params.time] - Specify the units for time. For example, '5d' or '7h'.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-snapshots/#response CAT snapshots Response}\n */\nCatApi.prototype.snapshots = function catSnapshotsApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, repository, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (repository != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'snapshots' + '/' + encodeURIComponent(repository);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'snapshots';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT tasks operation lists the progress of all tasks currently running on your cluster.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-tasks/ OpenSearch - CAT tasks}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {string} [params.nodes] - A comma-separated list of node IDs or names to limit the returned information. Use '_local' to return information from the node you’re connecting to, specify the node name to get information from specific nodes, or keep the parameter empty to get information from all nodes.\n * @param {string} [params.time] - Specify the units for time. For example, '5d' or '7h'.\n * @param {boolean} [params.detailed=false] - Returns detailed task information.\n * @param {string} [params.parent_task_id] - Returns tasks with a specified parent task ID (node_id:task_number). Keep empty or set to -1 to return all.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-tasks/#response CAT tasks Response}\n */\nCatApi.prototype.tasks = function catTasksApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cat' + '/' + 'tasks';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT templates operation lists the names, patterns, order numbers, and version numbers of index templates.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-templates/ OpenSearch - CAT templates}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {boolean} [params.name] - If you want to limit it to a specific template or pattern, provide the template name or pattern.\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-templates/#response CAT templates Response}\n */\nCatApi.prototype.templates = function catTemplatesApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, name, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'templates' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'templates';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * The CAT thread pool operation lists the active, queued, and rejected threads of different thread pools on each node.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/cat/cat-thread-pool/ OpenSearch - CAT thread pool}\n *\n * @memberOf API-CAT\n *\n * @param {Object} params - Accepts {@link https://opensearch.org/docs/latest/api-reference/cat/index#optional-query-parameters - common CAT parameters} along with the following unique parameters:\n * @param {boolean} [params.local=false] - Whether to return information from the local node only instead of from the cluster manager node.\n * @param {string} [params.cluster_manager_timeout=30s] - The amount of time to wait for a connection to the cluster manager node.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/cat/cat-thread-pool/#response CAT thread pool Response}\n */\nCatApi.prototype.threadPool = function catThreadPoolApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, threadPoolPatterns, thread_pool_patterns, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if ((thread_pool_patterns || threadPoolPatterns) != null) {\n    if (method == null) method = 'GET';\n    path =\n      '/' +\n      '_cat' +\n      '/' +\n      'thread_pool' +\n      '/' +\n      encodeURIComponent(thread_pool_patterns || threadPoolPatterns);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cat' + '/' + 'thread_pool';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(CatApi.prototype, {\n  pending_tasks: {\n    get() {\n      return this.pendingTasks;\n    },\n  },\n  thread_pool: {\n    get() {\n      return this.threadPool;\n    },\n  },\n});\n\nmodule.exports = CatApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}