{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst acceptedQuerystring = ['wait_for_active_shards', 'refresh', 'routing', 'timeout', 'type', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'pipeline', 'require_alias', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  waitForActiveShards: 'wait_for_active_shards',\n  _sourceExcludes: '_source_excludes',\n  _sourceExclude: '_source_exclude',\n  _sourceIncludes: '_source_includes',\n  _sourceInclude: '_source_include',\n  requireAlias: 'require_alias',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\n/**\n * The bulk operation lets you add, update, or delete many documents in a single request.\n * Compared to individual OpenSearch indexing requests, the bulk operation has significant performance benefits.\n * Whenever practical, we recommend batching indexing operations into bulk requests.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/document-apis/bulk/|OpenSearch - Bulk}\n *\n * @memberOf API-Document\n *\n * @param {Object} params\n * @param {Object[]} params.body - {@link https://opensearch.org/docs/latest/api-reference/document-apis/bulk/#request-body|Request Body}\n * @param {string} [params.index] - Specifying the index means you don’t need to include it in the request body.\n * @param {string} [params.pipeline] - The pipeline ID for preprocessing documents.\n * @param {string} [params.routing] - Routes the request to the specified shard.\n * @param {string} [params.refresh=false] - If true, OpenSearch refreshes shards to make the operation visible to searching. Valid options are 'true', 'false', and 'wait_for', which tells OpenSearch to wait for a refresh before executing the operation.\n * @param {string} [params.timeout=1m] - How long to wait for a response from the cluster.\n * @param {string} [params.wait_for_active_shards] - The number of active shards that must be available before OpenSearch processes the request. Default is 1 (only the primary shard). Set to all or a positive integer. Values greater than 1 require replicas. For example, if you specify a value of 3, the index must have two replicas distributed across two additional nodes for the operation to succeed.\n * @param {boolean} [params.require_alias=false] - Specifies whether the target index must be an index alias.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/document-apis/bulk/#response|Bulk Response}\n */\nfunction bulkApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (params.type != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (index != null && type != null) {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_bulk';\n  } else if (index != null) {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_bulk';\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + '_bulk';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    bulkBody: body,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\nmodule.exports = bulkApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","waitForActiveShards","_sourceExcludes","_sourceExclude","_sourceIncludes","_sourceInclude","requireAlias","errorTrace","filterPath","bulkApi","params","options","callback","body","err","type","index","method","querystring","path","encodeURIComponent","request","bulkBody","transport","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/bulk.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils');\nconst acceptedQuerystring = [\n  'wait_for_active_shards',\n  'refresh',\n  'routing',\n  'timeout',\n  'type',\n  '_source',\n  '_source_excludes',\n  '_source_exclude',\n  '_source_includes',\n  '_source_include',\n  'pipeline',\n  'require_alias',\n  'pretty',\n  'human',\n  'error_trace',\n  'source',\n  'filter_path',\n];\nconst snakeCase = {\n  waitForActiveShards: 'wait_for_active_shards',\n  _sourceExcludes: '_source_excludes',\n  _sourceExclude: '_source_exclude',\n  _sourceIncludes: '_source_includes',\n  _sourceInclude: '_source_include',\n  requireAlias: 'require_alias',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n};\n\n/**\n * The bulk operation lets you add, update, or delete many documents in a single request.\n * Compared to individual OpenSearch indexing requests, the bulk operation has significant performance benefits.\n * Whenever practical, we recommend batching indexing operations into bulk requests.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/document-apis/bulk/|OpenSearch - Bulk}\n *\n * @memberOf API-Document\n *\n * @param {Object} params\n * @param {Object[]} params.body - {@link https://opensearch.org/docs/latest/api-reference/document-apis/bulk/#request-body|Request Body}\n * @param {string} [params.index] - Specifying the index means you don’t need to include it in the request body.\n * @param {string} [params.pipeline] - The pipeline ID for preprocessing documents.\n * @param {string} [params.routing] - Routes the request to the specified shard.\n * @param {string} [params.refresh=false] - If true, OpenSearch refreshes shards to make the operation visible to searching. Valid options are 'true', 'false', and 'wait_for', which tells OpenSearch to wait for a refresh before executing the operation.\n * @param {string} [params.timeout=1m] - How long to wait for a response from the cluster.\n * @param {string} [params.wait_for_active_shards] - The number of active shards that must be available before OpenSearch processes the request. Default is 1 (only the primary shard). Set to all or a positive integer. Values greater than 1 require replicas. For example, if you specify a value of 3, the index must have two replicas distributed across two additional nodes for the operation to succeed.\n * @param {boolean} [params.require_alias=false] - Specifies whether the target index must be an index alias.\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*} {@link https://opensearch.org/docs/latest/api-reference/document-apis/bulk/#response|Bulk Response}\n */\nfunction bulkApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  // check required url components\n  if (params.type != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let { method, body, index, type, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (index != null && type != null) {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_bulk';\n  } else if (index != null) {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_bulk';\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + '_bulk';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    bulkBody: body,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = bulkApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}