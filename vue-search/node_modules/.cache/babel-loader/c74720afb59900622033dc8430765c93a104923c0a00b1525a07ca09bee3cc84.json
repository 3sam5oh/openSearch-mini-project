{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\nclass OpenSearchClientError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'OpenSearchClientError';\n  }\n}\nclass TimeoutError extends OpenSearchClientError {\n  constructor(message, meta) {\n    super(message);\n    Error.captureStackTrace(this, TimeoutError);\n    this.name = 'TimeoutError';\n    this.message = message || 'Timeout Error';\n    this.meta = meta;\n  }\n}\nclass ConnectionError extends OpenSearchClientError {\n  constructor(message, meta) {\n    super(message);\n    Error.captureStackTrace(this, ConnectionError);\n    this.name = 'ConnectionError';\n    this.message = message || 'Connection Error';\n    this.meta = meta;\n  }\n}\nclass NoLivingConnectionsError extends OpenSearchClientError {\n  constructor(message, meta) {\n    super(message);\n    Error.captureStackTrace(this, NoLivingConnectionsError);\n    this.name = 'NoLivingConnectionsError';\n    this.message = message || 'Given the configuration, the ConnectionPool was not able to find a usable Connection for this request.';\n    this.meta = meta;\n  }\n}\nclass SerializationError extends OpenSearchClientError {\n  constructor(message, data) {\n    super(message);\n    Error.captureStackTrace(this, SerializationError);\n    this.name = 'SerializationError';\n    this.message = message || 'Serialization Error';\n    this.data = data;\n  }\n}\nclass DeserializationError extends OpenSearchClientError {\n  constructor(message, data) {\n    super(message);\n    Error.captureStackTrace(this, DeserializationError);\n    this.name = 'DeserializationError';\n    this.message = message || 'Deserialization Error';\n    this.data = data;\n  }\n}\nclass ConfigurationError extends OpenSearchClientError {\n  constructor(message) {\n    super(message);\n    Error.captureStackTrace(this, ConfigurationError);\n    this.name = 'ConfigurationError';\n    this.message = message || 'Configuration Error';\n  }\n}\nclass ResponseError extends OpenSearchClientError {\n  constructor(meta) {\n    super('Response Error');\n    Error.captureStackTrace(this, ResponseError);\n    this.name = 'ResponseError';\n    if (meta.body && meta.body.error && meta.body.error.type) {\n      if (Array.isArray(meta.body.error.root_cause)) {\n        this.message = meta.body.error.type + ': ';\n        this.message += meta.body.error.root_cause.map(entry => `[${entry.type}] Reason: ${entry.reason}`).join('; ');\n      } else {\n        this.message = meta.body.error.type;\n      }\n    } else {\n      this.message = 'Response Error';\n    }\n    this.meta = meta;\n  }\n  get body() {\n    return this.meta.body;\n  }\n  get statusCode() {\n    if (this.meta.body && typeof this.meta.body.status === 'number') {\n      return this.meta.body.status;\n    }\n    return this.meta.statusCode;\n  }\n  get headers() {\n    return this.meta.headers;\n  }\n  toString() {\n    return JSON.stringify(this.meta.body);\n  }\n}\nclass RequestAbortedError extends OpenSearchClientError {\n  constructor(message, meta) {\n    super(message);\n    Error.captureStackTrace(this, RequestAbortedError);\n    this.name = 'RequestAbortedError';\n    this.message = message || 'Request aborted';\n    this.meta = meta;\n  }\n}\nclass NotCompatibleError extends OpenSearchClientError {\n  constructor(meta) {\n    super('Not Compatible Error');\n    Error.captureStackTrace(this, NotCompatibleError);\n    this.name = 'NotCompatibleError';\n    this.message = 'The client noticed that the server is not a supported distribution';\n    this.meta = meta;\n  }\n}\nmodule.exports = {\n  OpenSearchClientError,\n  TimeoutError,\n  ConnectionError,\n  NoLivingConnectionsError,\n  SerializationError,\n  DeserializationError,\n  ConfigurationError,\n  ResponseError,\n  RequestAbortedError,\n  NotCompatibleError\n};","map":{"version":3,"names":["OpenSearchClientError","Error","constructor","message","name","TimeoutError","meta","captureStackTrace","ConnectionError","NoLivingConnectionsError","SerializationError","data","DeserializationError","ConfigurationError","ResponseError","body","error","type","Array","isArray","root_cause","map","entry","reason","join","statusCode","status","headers","toString","JSON","stringify","RequestAbortedError","NotCompatibleError","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/lib/errors.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\nclass OpenSearchClientError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'OpenSearchClientError';\n  }\n}\n\nclass TimeoutError extends OpenSearchClientError {\n  constructor(message, meta) {\n    super(message);\n    Error.captureStackTrace(this, TimeoutError);\n    this.name = 'TimeoutError';\n    this.message = message || 'Timeout Error';\n    this.meta = meta;\n  }\n}\n\nclass ConnectionError extends OpenSearchClientError {\n  constructor(message, meta) {\n    super(message);\n    Error.captureStackTrace(this, ConnectionError);\n    this.name = 'ConnectionError';\n    this.message = message || 'Connection Error';\n    this.meta = meta;\n  }\n}\n\nclass NoLivingConnectionsError extends OpenSearchClientError {\n  constructor(message, meta) {\n    super(message);\n    Error.captureStackTrace(this, NoLivingConnectionsError);\n    this.name = 'NoLivingConnectionsError';\n    this.message =\n      message ||\n      'Given the configuration, the ConnectionPool was not able to find a usable Connection for this request.';\n    this.meta = meta;\n  }\n}\n\nclass SerializationError extends OpenSearchClientError {\n  constructor(message, data) {\n    super(message);\n    Error.captureStackTrace(this, SerializationError);\n    this.name = 'SerializationError';\n    this.message = message || 'Serialization Error';\n    this.data = data;\n  }\n}\n\nclass DeserializationError extends OpenSearchClientError {\n  constructor(message, data) {\n    super(message);\n    Error.captureStackTrace(this, DeserializationError);\n    this.name = 'DeserializationError';\n    this.message = message || 'Deserialization Error';\n    this.data = data;\n  }\n}\n\nclass ConfigurationError extends OpenSearchClientError {\n  constructor(message) {\n    super(message);\n    Error.captureStackTrace(this, ConfigurationError);\n    this.name = 'ConfigurationError';\n    this.message = message || 'Configuration Error';\n  }\n}\n\nclass ResponseError extends OpenSearchClientError {\n  constructor(meta) {\n    super('Response Error');\n    Error.captureStackTrace(this, ResponseError);\n    this.name = 'ResponseError';\n    if (meta.body && meta.body.error && meta.body.error.type) {\n      if (Array.isArray(meta.body.error.root_cause)) {\n        this.message = meta.body.error.type + ': ';\n        this.message += meta.body.error.root_cause\n          .map((entry) => `[${entry.type}] Reason: ${entry.reason}`)\n          .join('; ');\n      } else {\n        this.message = meta.body.error.type;\n      }\n    } else {\n      this.message = 'Response Error';\n    }\n    this.meta = meta;\n  }\n\n  get body() {\n    return this.meta.body;\n  }\n\n  get statusCode() {\n    if (this.meta.body && typeof this.meta.body.status === 'number') {\n      return this.meta.body.status;\n    }\n    return this.meta.statusCode;\n  }\n\n  get headers() {\n    return this.meta.headers;\n  }\n\n  toString() {\n    return JSON.stringify(this.meta.body);\n  }\n}\n\nclass RequestAbortedError extends OpenSearchClientError {\n  constructor(message, meta) {\n    super(message);\n    Error.captureStackTrace(this, RequestAbortedError);\n    this.name = 'RequestAbortedError';\n    this.message = message || 'Request aborted';\n    this.meta = meta;\n  }\n}\n\nclass NotCompatibleError extends OpenSearchClientError {\n  constructor(meta) {\n    super('Not Compatible Error');\n    Error.captureStackTrace(this, NotCompatibleError);\n    this.name = 'NotCompatibleError';\n    this.message = 'The client noticed that the server is not a supported distribution';\n    this.meta = meta;\n  }\n}\n\nmodule.exports = {\n  OpenSearchClientError,\n  TimeoutError,\n  ConnectionError,\n  NoLivingConnectionsError,\n  SerializationError,\n  DeserializationError,\n  ConfigurationError,\n  ResponseError,\n  RequestAbortedError,\n  NotCompatibleError,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}