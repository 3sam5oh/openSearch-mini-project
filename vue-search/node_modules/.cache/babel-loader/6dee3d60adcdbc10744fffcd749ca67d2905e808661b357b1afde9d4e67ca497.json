{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"wrap\"\n};\nconst _hoisted_2 = {\n  class: \"header\"\n};\nconst _hoisted_3 = {\n  class: \"search-container\"\n};\nconst _hoisted_4 = {\n  class: \"content\"\n};\nconst _hoisted_5 = {\n  class: \"context\"\n};\nconst _hoisted_6 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"header\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"search\",\n    placeholder: \"검색어 입력\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.searchQuery = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.fetchSynonyms && $options.fetchSynonyms(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.searchQuery]])])]), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, \"검색어: \" + _toDisplayString($data.searchQuery), 1 /* TEXT */), $data.synonyms.length ? (_openBlock(), _createElementBlock(\"p\", _hoisted_6, \"동의어 제안: \" + _toDisplayString($data.synonyms.join(', ')), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)])])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","type","placeholder","_cache","$event","$data","searchQuery","onInput","args","$options","fetchSynonyms","_hoisted_4","_hoisted_5","_toDisplayString","synonyms","length","_hoisted_6","join","_createCommentVNode"],"sources":["C:\\search\\vue-search\\src\\views\\SearchMain.vue"],"sourcesContent":["<template>\r\n    <div class=\"wrap\">\r\n      <header class=\"header\">\r\n        <div class=\"search-container\">\r\n          <input \r\n            type=\"search\" \r\n            placeholder=\"검색어 입력\" \r\n            v-model=\"searchQuery\"\r\n            @input=\"fetchSynonyms\"\r\n          />\r\n        </div>\r\n      </header>\r\n      <div class=\"content\">\r\n        <div class=\"context\">\r\n          <div>\r\n            <p>검색어: {{ searchQuery }}</p>\r\n            <p v-if=\"synonyms.length\">동의어 제안: {{ synonyms.join(', ') }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    name: \"SearchMain\",\r\n    data() {\r\n      return {\r\n        searchQuery: '',\r\n        synonyms: []\r\n      };\r\n    },\r\n    methods: {\r\n      async fetchSynonyms() {\r\n        let query = this.searchQuery.trim();\r\n        \r\n        // 네이버 맞춤법 검사기 API 호출\r\n        try {\r\n          const correctionResponse = await axios.post('https://m.search.naver.com/p/csearch/ocontent/util/SpellerProxy', null, {\r\n            params: {\r\n              _callback: 'window.__jindo2_callback._spellingCheck_0',\r\n              q: query\r\n            }\r\n          });\r\n          const correctedQuery = this.parseCorrectionResponse(correctionResponse.data);\r\n          \r\n          if (correctedQuery.length > 0) {\r\n            query = correctedQuery;\r\n          }\r\n        } catch (error) {\r\n          console.error('Error correcting query:', error);\r\n        }\r\n  \r\n        // 교정된 검색어로 네이버 API 호출\r\n        if (query.length > 0) {\r\n          try {\r\n            const response = await axios.get(`/api/v1/search/encyc.json`, {\r\n              params: { query },\r\n              headers: {\r\n                'X-Naver-Client-Id': 'HMfqGNJy1U9czwPDacct',\r\n                'X-Naver-Client-Secret': 'ncUkkRXeUU'\r\n              }\r\n            });\r\n            this.synonyms = response.data.items.map(item => item.title);\r\n          } catch (error) {\r\n            console.error('Error fetching synonyms:', error);\r\n            this.synonyms = [];\r\n          }\r\n        } else {\r\n          this.synonyms = [];\r\n        }\r\n      },\r\n      parseCorrectionResponse(data) {\r\n        // 네이버 맞춤법 검사기 API의 콜백 형식을 제거하고 JSON 파싱\r\n        const jsonString = data.replace(/^window.__jindo2_callback._spellingCheck_0\\((.*)\\);$/, '$1');\r\n        const jsonData = JSON.parse(jsonString);\r\n        return jsonData.message.result.html.replace(/<\\/?[^>]+(>|$)/g, \"\"); // HTML 태그 제거\r\n      }\r\n    }\r\n  };\r\n  </script>"],"mappings":";;EACSA,KAAK,EAAC;AAAM;;EACPA,KAAK,EAAC;AAAQ;;EACfA,KAAK,EAAC;AAAkB;;EAS1BA,KAAK,EAAC;AAAS;;EACbA,KAAK,EAAC;AAAS;;EAb5BC,GAAA;AAAA;;uBACIC,mBAAA,CAmBM,OAnBNC,UAmBM,GAlBJC,mBAAA,CASS,UATTC,UASS,GARPD,mBAAA,CAOM,OAPNE,UAOM,G,gBANJF,mBAAA,CAKE;IAJAG,IAAI,EAAC,QAAQ;IACbC,WAAW,EAAC,QAAQ;IANhC,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAOqBC,KAAA,CAAAC,WAAW,GAAAF,MAAA;IACnBG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;iEADZH,KAAA,CAAAC,WAAW,E,OAK1BR,mBAAA,CAOM,OAPNa,UAOM,GANJb,mBAAA,CAKM,OALNc,UAKM,GAJJd,mBAAA,CAGM,cAFJA,mBAAA,CAA6B,WAA1B,OAAK,GAAAe,gBAAA,CAAGR,KAAA,CAAAC,WAAW,kBACbD,KAAA,CAAAS,QAAQ,CAACC,MAAM,I,cAAxBnB,mBAAA,CAA+D,KAhB3EoB,UAAA,EAgBsC,UAAQ,GAAAH,gBAAA,CAAGR,KAAA,CAAAS,QAAQ,CAACG,IAAI,0BAhB9DC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}