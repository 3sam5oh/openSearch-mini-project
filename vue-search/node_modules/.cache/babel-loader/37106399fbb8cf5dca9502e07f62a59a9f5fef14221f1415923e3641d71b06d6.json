{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\nconst {\n  stringify\n} = require('querystring');\nconst debug = require('debug')('opensearch');\nconst sjson = require('secure-json-parse');\nconst {\n  SerializationError,\n  DeserializationError\n} = require('./errors');\nconst kJsonOptions = Symbol('secure json parse options');\nconst JSON11 = require('json11');\nconst isBigIntSupported = typeof BigInt !== 'undefined';\nclass Serializer {\n  constructor(opts = {}) {\n    const disable = opts.disablePrototypePoisoningProtection;\n    this[kJsonOptions] = {\n      protoAction: disable === true || disable === 'proto' ? 'ignore' : 'error',\n      constructorAction: disable === true || disable === 'constructor' ? 'ignore' : 'error',\n      enableLongNumeralSupport: opts.enableLongNumeralSupport === true\n    };\n  }\n  serialize(object) {\n    debug('Serializing', object);\n    let json;\n    let numeralsAreNumbers = true;\n    const checkForBigInts = (key, val) => {\n      if (typeof val === 'bigint') {\n        numeralsAreNumbers = false;\n        // Number() is much faster than parseInt() on BigInt values\n        return Number(val);\n      }\n      return val;\n    };\n    const shouldHandleLongNumerals = isBigIntSupported && this[kJsonOptions].enableLongNumeralSupport;\n    try {\n      /* When handling long numerals is not requested or the platform doesn't support BigInt, the\n       * result of JSON.stringify are returned.\n       *\n       * When long numerals should be handled:\n       *   Use JSON.stringify to check if any value is a BigInt:\n       *   * If no BigInt values are found, the result of JSON.stringify is good enough to be returned.\n       *   * Only If a BigInt value is found, JSON11.stringify is employed and its result is returned.\n       */\n      json = JSON.stringify(object, shouldHandleLongNumerals ? checkForBigInts : null);\n      if (shouldHandleLongNumerals && !numeralsAreNumbers) {\n        try {\n          // With `withBigInt: false`, valid JSON is produced while maintaining accuracy\n          const temp = JSON11.stringify(object, {\n            withBigInt: false,\n            quote: '\"',\n            quoteNames: true\n          });\n          if (temp) json = temp;\n        } catch (ex) {\n          // Do nothing: JSON.stringify succeeded but JSON11.stringify failed; return the\n          // JSON.stringify result.\n        }\n      }\n    } catch (err) {\n      throw new SerializationError(err.message, object);\n    }\n    return json;\n  }\n  deserialize(json) {\n    debug('Deserializing', json);\n    let object;\n    let numeralsAreNumbers = true;\n    const checkForLargeNumerals = (key, val) => {\n      if (numeralsAreNumbers && typeof val === 'number' && (val < Number.MAX_SAFE_INTEGER || val > Number.MAX_SAFE_INTEGER)) {\n        numeralsAreNumbers = false;\n      }\n      return val;\n    };\n    const shouldHandleLongNumerals = isBigIntSupported && this[kJsonOptions].enableLongNumeralSupport;\n    try {\n      /* When handling long numerals is not requested or the platform doesn't support BigInt, the\n       * result of sjson.parse are returned.\n       *\n       * When long numerals should be handled:\n       *   Use sjson.parse to check if any value is outside the range of safe integers:\n       *   * If no long numerals are found, the result of sjson.parse is good enough to be returned.\n       *   * Only If long numerals are found, JSON11.parse is employed and its result is returned.\n       */\n      object = sjson.parse(json, shouldHandleLongNumerals ? checkForLargeNumerals : null, this[kJsonOptions]);\n      if (shouldHandleLongNumerals && !numeralsAreNumbers) {\n        try {\n          const temp = JSON11.parse(json, null, {\n            withLongNumerals: true\n          });\n          if (temp) {\n            object = temp;\n          }\n        } catch (ex) {\n          // Do nothing: sjson.parse succeeded but JSON11.parse failed; return the sjson.parse result\n        }\n      }\n    } catch (err) {\n      throw new DeserializationError(err.message, json);\n    }\n    return object;\n  }\n  ndserialize(array) {\n    debug('ndserialize', array);\n    if (Array.isArray(array) === false) {\n      throw new SerializationError('The argument provided is not an array', array);\n    }\n    let ndjson = '';\n    for (let i = 0, len = array.length; i < len; i++) {\n      if (typeof array[i] === 'string') {\n        ndjson += array[i] + '\\n';\n      } else {\n        ndjson += this.serialize(array[i]) + '\\n';\n      }\n    }\n    return ndjson;\n  }\n  qserialize(object) {\n    debug('qserialize', object);\n    if (object == null) return '';\n    if (typeof object === 'string') return object;\n    // arrays should be serialized as comma separated list\n    const keys = Object.keys(object);\n    for (let i = 0, len = keys.length; i < len; i++) {\n      const key = keys[i];\n      // OpenSearch will complain about keys without a value\n      if (object[key] === undefined) {\n        delete object[key];\n      } else if (Array.isArray(object[key]) === true) {\n        object[key] = object[key].join(',');\n      }\n    }\n    return stringify(object);\n  }\n}\nmodule.exports = Serializer;","map":{"version":3,"names":["stringify","require","debug","sjson","SerializationError","DeserializationError","kJsonOptions","Symbol","JSON11","isBigIntSupported","BigInt","Serializer","constructor","opts","disable","disablePrototypePoisoningProtection","protoAction","constructorAction","enableLongNumeralSupport","serialize","object","json","numeralsAreNumbers","checkForBigInts","key","val","Number","shouldHandleLongNumerals","JSON","temp","withBigInt","quote","quoteNames","ex","err","message","deserialize","checkForLargeNumerals","MAX_SAFE_INTEGER","parse","withLongNumerals","ndserialize","array","Array","isArray","ndjson","i","len","length","qserialize","keys","Object","undefined","join","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/lib/Serializer.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\nconst { stringify } = require('querystring');\nconst debug = require('debug')('opensearch');\nconst sjson = require('secure-json-parse');\nconst { SerializationError, DeserializationError } = require('./errors');\nconst kJsonOptions = Symbol('secure json parse options');\nconst JSON11 = require('json11');\n\nconst isBigIntSupported = typeof BigInt !== 'undefined';\n\nclass Serializer {\n  constructor(opts = {}) {\n    const disable = opts.disablePrototypePoisoningProtection;\n    this[kJsonOptions] = {\n      protoAction: disable === true || disable === 'proto' ? 'ignore' : 'error',\n      constructorAction: disable === true || disable === 'constructor' ? 'ignore' : 'error',\n      enableLongNumeralSupport: opts.enableLongNumeralSupport === true,\n    };\n  }\n\n  serialize(object) {\n    debug('Serializing', object);\n    let json;\n    let numeralsAreNumbers = true;\n    const checkForBigInts = (key, val) => {\n      if (typeof val === 'bigint') {\n        numeralsAreNumbers = false;\n        // Number() is much faster than parseInt() on BigInt values\n        return Number(val);\n      }\n      return val;\n    };\n    const shouldHandleLongNumerals =\n      isBigIntSupported && this[kJsonOptions].enableLongNumeralSupport;\n    try {\n      /* When handling long numerals is not requested or the platform doesn't support BigInt, the\n       * result of JSON.stringify are returned.\n       *\n       * When long numerals should be handled:\n       *   Use JSON.stringify to check if any value is a BigInt:\n       *   * If no BigInt values are found, the result of JSON.stringify is good enough to be returned.\n       *   * Only If a BigInt value is found, JSON11.stringify is employed and its result is returned.\n       */\n      json = JSON.stringify(object, shouldHandleLongNumerals ? checkForBigInts : null);\n\n      if (shouldHandleLongNumerals && !numeralsAreNumbers) {\n        try {\n          // With `withBigInt: false`, valid JSON is produced while maintaining accuracy\n          const temp = JSON11.stringify(object, {\n            withBigInt: false,\n            quote: '\"',\n            quoteNames: true,\n          });\n          if (temp) json = temp;\n        } catch (ex) {\n          // Do nothing: JSON.stringify succeeded but JSON11.stringify failed; return the\n          // JSON.stringify result.\n        }\n      }\n    } catch (err) {\n      throw new SerializationError(err.message, object);\n    }\n    return json;\n  }\n\n  deserialize(json) {\n    debug('Deserializing', json);\n    let object;\n    let numeralsAreNumbers = true;\n    const checkForLargeNumerals = (key, val) => {\n      if (\n        numeralsAreNumbers &&\n        typeof val === 'number' &&\n        (val < Number.MAX_SAFE_INTEGER || val > Number.MAX_SAFE_INTEGER)\n      ) {\n        numeralsAreNumbers = false;\n      }\n\n      return val;\n    };\n    const shouldHandleLongNumerals =\n      isBigIntSupported && this[kJsonOptions].enableLongNumeralSupport;\n    try {\n      /* When handling long numerals is not requested or the platform doesn't support BigInt, the\n       * result of sjson.parse are returned.\n       *\n       * When long numerals should be handled:\n       *   Use sjson.parse to check if any value is outside the range of safe integers:\n       *   * If no long numerals are found, the result of sjson.parse is good enough to be returned.\n       *   * Only If long numerals are found, JSON11.parse is employed and its result is returned.\n       */\n      object = sjson.parse(\n        json,\n        shouldHandleLongNumerals ? checkForLargeNumerals : null,\n        this[kJsonOptions]\n      );\n\n      if (shouldHandleLongNumerals && !numeralsAreNumbers) {\n        try {\n          const temp = JSON11.parse(json, null, { withLongNumerals: true });\n          if (temp) {\n            object = temp;\n          }\n        } catch (ex) {\n          // Do nothing: sjson.parse succeeded but JSON11.parse failed; return the sjson.parse result\n        }\n      }\n    } catch (err) {\n      throw new DeserializationError(err.message, json);\n    }\n    return object;\n  }\n\n  ndserialize(array) {\n    debug('ndserialize', array);\n    if (Array.isArray(array) === false) {\n      throw new SerializationError('The argument provided is not an array', array);\n    }\n    let ndjson = '';\n    for (let i = 0, len = array.length; i < len; i++) {\n      if (typeof array[i] === 'string') {\n        ndjson += array[i] + '\\n';\n      } else {\n        ndjson += this.serialize(array[i]) + '\\n';\n      }\n    }\n    return ndjson;\n  }\n\n  qserialize(object) {\n    debug('qserialize', object);\n    if (object == null) return '';\n    if (typeof object === 'string') return object;\n    // arrays should be serialized as comma separated list\n    const keys = Object.keys(object);\n    for (let i = 0, len = keys.length; i < len; i++) {\n      const key = keys[i];\n      // OpenSearch will complain about keys without a value\n      if (object[key] === undefined) {\n        delete object[key];\n      } else if (Array.isArray(object[key]) === true) {\n        object[key] = object[key].join(',');\n      }\n    }\n    return stringify(object);\n  }\n}\n\nmodule.exports = Serializer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}