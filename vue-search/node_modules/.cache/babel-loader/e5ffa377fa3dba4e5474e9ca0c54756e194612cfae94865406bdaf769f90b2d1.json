{"ast":null,"code":"'use strict';\n\nconst https = require('https');\nconst http = require('http');\nconst {\n  URL\n} = require('url');\nclass HttpProxyAgent extends http.Agent {\n  constructor(options) {\n    const {\n      proxy,\n      proxyRequestOptions,\n      ...opts\n    } = options;\n    super(opts);\n    this.proxy = typeof proxy === 'string' ? new URL(proxy) : proxy;\n    this.proxyRequestOptions = proxyRequestOptions || {};\n  }\n  createConnection(options, callback) {\n    const requestOptions = {\n      ...this.proxyRequestOptions,\n      method: 'CONNECT',\n      host: this.proxy.hostname,\n      port: this.proxy.port,\n      path: `${options.host}:${options.port}`,\n      setHost: false,\n      headers: {\n        ...this.proxyRequestOptions.headers,\n        connection: this.keepAlive ? 'keep-alive' : 'close',\n        host: `${options.host}:${options.port}`\n      },\n      agent: false,\n      timeout: options.timeout || 0\n    };\n    if (this.proxy.username || this.proxy.password) {\n      const base64 = Buffer.from(`${decodeURIComponent(this.proxy.username || '')}:${decodeURIComponent(this.proxy.password || '')}`).toString('base64');\n      requestOptions.headers['proxy-authorization'] = `Basic ${base64}`;\n    }\n    if (this.proxy.protocol === 'https:') {\n      requestOptions.servername = this.proxy.hostname;\n    }\n    const request = (this.proxy.protocol === 'http:' ? http : https).request(requestOptions);\n    request.once('connect', (response, socket, head) => {\n      request.removeAllListeners();\n      socket.removeAllListeners();\n      if (response.statusCode === 200) {\n        callback(null, socket);\n      } else {\n        socket.destroy();\n        callback(new Error(`Bad response: ${response.statusCode}`), null);\n      }\n    });\n    request.once('timeout', () => {\n      request.destroy(new Error('Proxy timeout'));\n    });\n    request.once('error', err => {\n      request.removeAllListeners();\n      callback(err, null);\n    });\n    request.end();\n  }\n}\nclass HttpsProxyAgent extends https.Agent {\n  constructor(options) {\n    const {\n      proxy,\n      proxyRequestOptions,\n      ...opts\n    } = options;\n    super(opts);\n    this.proxy = typeof proxy === 'string' ? new URL(proxy) : proxy;\n    this.proxyRequestOptions = proxyRequestOptions || {};\n  }\n  createConnection(options, callback) {\n    const requestOptions = {\n      ...this.proxyRequestOptions,\n      method: 'CONNECT',\n      host: this.proxy.hostname,\n      port: this.proxy.port,\n      path: `${options.host}:${options.port}`,\n      setHost: false,\n      headers: {\n        ...this.proxyRequestOptions.headers,\n        connection: this.keepAlive ? 'keep-alive' : 'close',\n        host: `${options.host}:${options.port}`\n      },\n      agent: false,\n      timeout: options.timeout || 0\n    };\n    if (this.proxy.username || this.proxy.password) {\n      const base64 = Buffer.from(`${decodeURIComponent(this.proxy.username || '')}:${decodeURIComponent(this.proxy.password || '')}`).toString('base64');\n      requestOptions.headers['proxy-authorization'] = `Basic ${base64}`;\n    }\n\n    // Necessary for the TLS check with the proxy to succeed.\n    if (this.proxy.protocol === 'https:') {\n      requestOptions.servername = this.proxy.hostname;\n    }\n    const request = (this.proxy.protocol === 'http:' ? http : https).request(requestOptions);\n    request.once('connect', (response, socket, head) => {\n      request.removeAllListeners();\n      socket.removeAllListeners();\n      if (response.statusCode === 200) {\n        const secureSocket = super.createConnection({\n          ...options,\n          socket\n        });\n        callback(null, secureSocket);\n      } else {\n        socket.destroy();\n        callback(new Error(`Bad response: ${response.statusCode}`), null);\n      }\n    });\n    request.once('timeout', () => {\n      request.destroy(new Error('Proxy timeout'));\n    });\n    request.once('error', err => {\n      request.removeAllListeners();\n      callback(err, null);\n    });\n    request.end();\n  }\n}\nmodule.exports = {\n  HttpProxyAgent,\n  HttpsProxyAgent\n};","map":{"version":3,"names":["https","require","http","URL","HttpProxyAgent","Agent","constructor","options","proxy","proxyRequestOptions","opts","createConnection","callback","requestOptions","method","host","hostname","port","path","setHost","headers","connection","keepAlive","agent","timeout","username","password","base64","Buffer","from","decodeURIComponent","toString","protocol","servername","request","once","response","socket","head","removeAllListeners","statusCode","destroy","Error","err","end","HttpsProxyAgent","secureSocket","module","exports"],"sources":["C:/search/vue-search/node_modules/hpagent/index.js"],"sourcesContent":["'use strict'\n\nconst https = require('https')\nconst http = require('http')\nconst { URL } = require('url')\n\nclass HttpProxyAgent extends http.Agent {\n  constructor (options) {\n    const { proxy, proxyRequestOptions, ...opts } = options\n    super(opts)\n    this.proxy = typeof proxy === 'string'\n      ? new URL(proxy)\n      : proxy\n    this.proxyRequestOptions = proxyRequestOptions || {}\n  }\n\n  createConnection (options, callback) {\n    const requestOptions = {\n      ...this.proxyRequestOptions,\n      method: 'CONNECT',\n      host: this.proxy.hostname,\n      port: this.proxy.port,\n      path: `${options.host}:${options.port}`,\n      setHost: false,\n      headers: { ...this.proxyRequestOptions.headers, connection: this.keepAlive ? 'keep-alive' : 'close', host: `${options.host}:${options.port}` },\n      agent: false,\n      timeout: options.timeout || 0\n    }\n\n    if (this.proxy.username || this.proxy.password) {\n      const base64 = Buffer.from(`${decodeURIComponent(this.proxy.username || '')}:${decodeURIComponent(this.proxy.password || '')}`).toString('base64')\n      requestOptions.headers['proxy-authorization'] = `Basic ${base64}`\n    }\n\n    if (this.proxy.protocol === 'https:') {\n      requestOptions.servername = this.proxy.hostname\n    }\n\n    const request = (this.proxy.protocol === 'http:' ? http : https).request(requestOptions)\n    request.once('connect', (response, socket, head) => {\n      request.removeAllListeners()\n      socket.removeAllListeners()\n      if (response.statusCode === 200) {\n        callback(null, socket)\n      } else {\n        socket.destroy()\n        callback(new Error(`Bad response: ${response.statusCode}`), null)\n      }\n    })\n\n    request.once('timeout', () => {\n      request.destroy(new Error('Proxy timeout'))\n    })\n\n    request.once('error', err => {\n      request.removeAllListeners()\n      callback(err, null)\n    })\n\n    request.end()\n  }\n}\n\nclass HttpsProxyAgent extends https.Agent {\n  constructor (options) {\n    const { proxy, proxyRequestOptions, ...opts } = options\n    super(opts)\n    this.proxy = typeof proxy === 'string'\n      ? new URL(proxy)\n      : proxy\n    this.proxyRequestOptions = proxyRequestOptions || {}\n  }\n\n  createConnection (options, callback) {\n    const requestOptions = {\n      ...this.proxyRequestOptions,\n      method: 'CONNECT',\n      host: this.proxy.hostname,\n      port: this.proxy.port,\n      path: `${options.host}:${options.port}`,\n      setHost: false,\n      headers: { ...this.proxyRequestOptions.headers, connection: this.keepAlive ? 'keep-alive' : 'close', host: `${options.host}:${options.port}` },\n      agent: false,\n      timeout: options.timeout || 0\n    }\n\n    if (this.proxy.username || this.proxy.password) {\n      const base64 = Buffer.from(`${decodeURIComponent(this.proxy.username || '')}:${decodeURIComponent(this.proxy.password || '')}`).toString('base64')\n      requestOptions.headers['proxy-authorization'] = `Basic ${base64}`\n    }\n\n    // Necessary for the TLS check with the proxy to succeed.\n    if (this.proxy.protocol === 'https:') {\n      requestOptions.servername = this.proxy.hostname\n    }\n\n    const request = (this.proxy.protocol === 'http:' ? http : https).request(requestOptions)\n    request.once('connect', (response, socket, head) => {\n      request.removeAllListeners()\n      socket.removeAllListeners()\n      if (response.statusCode === 200) {\n        const secureSocket = super.createConnection({ ...options, socket })\n        callback(null, secureSocket)\n      } else {\n        socket.destroy()\n        callback(new Error(`Bad response: ${response.statusCode}`), null)\n      }\n    })\n\n    request.once('timeout', () => {\n      request.destroy(new Error('Proxy timeout'))\n    })\n\n    request.once('error', err => {\n      request.removeAllListeners()\n      callback(err, null)\n    })\n\n    request.end()\n  }\n}\n\nmodule.exports = {\n  HttpProxyAgent,\n  HttpsProxyAgent\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}