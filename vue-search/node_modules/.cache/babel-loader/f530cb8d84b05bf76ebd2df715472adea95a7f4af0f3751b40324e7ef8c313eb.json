{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst acceptedQuerystring = ['analyze_wildcard', 'analyzer', 'default_operator', 'df', 'stored_fields', 'lenient', 'preference', 'q', 'routing', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  analyzeWildcard: 'analyze_wildcard',\n  defaultOperator: 'default_operator',\n  storedFields: 'stored_fields',\n  _sourceExcludes: '_source_excludes',\n  _sourceExclude: '_source_exclude',\n  _sourceIncludes: '_source_includes',\n  _sourceInclude: '_source_include',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\n/**\n * Returns information about why a specific matches (or doesn't match) a query.\n * <br/> See also: {@link https://opensearch.org/docs/latest/api-reference/explain/ OpenSearch - Explain}\n * @memberOf API-Search\n *\n * @param {Object} params\n * @param {string} [params.id] - The document ID\n * @param {string} [params.index] - The name of the index\n * @param {Object} [params.body] - The query definition using the Query DSL\n * @param {string} [params.analyzer] - The analyzer to use for the query string\n * @param {boolean} [params.analyze_wildcard=false] - Specify whether wildcard and prefix queries should be analyzed\n * @param {string} [params.default_operator=OR] - The default operator for query string query (options: AND, OR)\n * @param {string} [params.df] - The default field for query string query (default: _all)\n * @param {string} [params.stored_fields] - A comma-separated list of stored fields to return in the response\n * @param {boolean} [params.lenient] - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {string} [params.preference] - Specify the node or shard the operation should be performed on (default: random)\n * @param {string} [params.q] - Query in the Lucene query string syntax\n * @param {string} [params.routing] - Specific routing value\n * @param {string} [params._source=true] - Whether to include the '_source' field in the response body.\n * @param {string} [params._source_excludes] - A comma-separated list of source fields to exclude in the query response.\n * @param {string} [params._source_includes] - A comma-separated list of source fields to include in the query response.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nfunction explainApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    id,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (index != null && type != null && id != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id) + '/' + '_explain';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_explain' + '/' + encodeURIComponent(id);\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\nmodule.exports = explainApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","analyzeWildcard","defaultOperator","storedFields","_sourceExcludes","_sourceExclude","_sourceIncludes","_sourceInclude","errorTrace","filterPath","explainApi","params","options","callback","id","err","index","method","body","type","querystring","path","encodeURIComponent","request","transport","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/explain.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils');\nconst acceptedQuerystring = [\n  'analyze_wildcard',\n  'analyzer',\n  'default_operator',\n  'df',\n  'stored_fields',\n  'lenient',\n  'preference',\n  'q',\n  'routing',\n  '_source',\n  '_source_excludes',\n  '_source_exclude',\n  '_source_includes',\n  '_source_include',\n  'pretty',\n  'human',\n  'error_trace',\n  'source',\n  'filter_path',\n];\nconst snakeCase = {\n  analyzeWildcard: 'analyze_wildcard',\n  defaultOperator: 'default_operator',\n  storedFields: 'stored_fields',\n  _sourceExcludes: '_source_excludes',\n  _sourceExclude: '_source_exclude',\n  _sourceIncludes: '_source_includes',\n  _sourceInclude: '_source_include',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n};\n\n/**\n * Returns information about why a specific matches (or doesn't match) a query.\n * <br/> See also: {@link https://opensearch.org/docs/latest/api-reference/explain/ OpenSearch - Explain}\n * @memberOf API-Search\n *\n * @param {Object} params\n * @param {string} [params.id] - The document ID\n * @param {string} [params.index] - The name of the index\n * @param {Object} [params.body] - The query definition using the Query DSL\n * @param {string} [params.analyzer] - The analyzer to use for the query string\n * @param {boolean} [params.analyze_wildcard=false] - Specify whether wildcard and prefix queries should be analyzed\n * @param {string} [params.default_operator=OR] - The default operator for query string query (options: AND, OR)\n * @param {string} [params.df] - The default field for query string query (default: _all)\n * @param {string} [params.stored_fields] - A comma-separated list of stored fields to return in the response\n * @param {boolean} [params.lenient] - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n * @param {string} [params.preference] - Specify the node or shard the operation should be performed on (default: random)\n * @param {string} [params.q] - Query in the Lucene query string syntax\n * @param {string} [params.routing] - Specific routing value\n * @param {string} [params._source=true] - Whether to include the '_source' field in the response body.\n * @param {string} [params._source_excludes] - A comma-separated list of source fields to exclude in the query response.\n * @param {string} [params._source_includes] - A comma-separated list of source fields to include in the query response.\n *\n * @param {Object} [options] - Options for {@link Transport#request}\n * @param {function} [callback] - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nfunction explainApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let { method, body, id, index, type, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (index != null && type != null && id != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path =\n      '/' +\n      encodeURIComponent(index) +\n      '/' +\n      encodeURIComponent(type) +\n      '/' +\n      encodeURIComponent(id) +\n      '/' +\n      '_explain';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_explain' + '/' + encodeURIComponent(id);\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = explainApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}