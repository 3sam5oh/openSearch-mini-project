{"ast":null,"code":"/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\n/** @namespace API-Tasks */\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\nconst acceptedQuerystring = ['nodes', 'actions', 'parent_task_id', 'wait_for_completion', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'timeout', 'detailed', 'group_by'];\nconst snakeCase = {\n  parentTaskId: 'parent_task_id',\n  waitForCompletion: 'wait_for_completion',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  groupBy: 'group_by'\n};\nfunction TasksApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n/**\n * Cancels a task, if it can be cancelled through an API.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/tasks/#task-canceling OpenSearch - Task Cancelling}\n *\n * @memberOf API-Tasks\n *\n * @param {Object} params\n * @param {string} [params.task_id] - Cancel the task with specified task id (node_id:task_number)\n * @param {string} [params.nodes] - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {string} [params.actions] - A comma-separated list of actions that should be cancelled. Leave empty to cancel all.\n * @param {string} [params.parent_task_id] - Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.\n * @param {boolean} [params.wait_for_completion] - Should the request block until the cancellation of the task and its descendant tasks is completed. Defaults to false\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nTasksApi.prototype.cancel = function tasksCancelApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    taskId,\n    task_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if ((task_id || taskId) != null) {\n    if (method == null) method = 'POST';\n    path = '/' + '_tasks' + '/' + encodeURIComponent(task_id || taskId) + '/' + '_cancel';\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + '_tasks' + '/' + '_cancel';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Returns information about a task.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/tasks OpenSearch - Tasks}\n *\n * @memberOf API-Tasks\n *\n * @param {Object} params\n * @param {string} [params.task_id] - Return the task with specified id (node_id:task_number)\n * @param {boolean} [params.wait_for_completion] - Wait for the matching tasks to complete (default: false)\n * @param {string} [params.timeout] - Explicit operation timeoutompletion] - Should the request block until the cancellation of the task and its descendant tasks is completed. Defaults to false\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nTasksApi.prototype.get = function tasksGetApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.task_id == null && params.taskId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: task_id or taskId');\n    return handleError(err, callback);\n  }\n  let {\n    method,\n    body,\n    taskId,\n    task_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_tasks' + '/' + encodeURIComponent(task_id || taskId);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Returns a list of tasks.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/tasks OpenSearch - Tasks}\n *\n * @memberOf API-Tasks\n *\n * @param {Object} params\n * @param {string} [params.nodes] - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {string} [params.actions] - A comma-separated list of actions that should be returned. Leave empty to return all.\n * @param {boolean} [params.detailed] - Return detailed task information (default: false)\n * @param {string} [params.parent_task_id] - Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.\n * @param {boolean} [params.wait_for_completion] - Wait for the matching tasks to complete (default: false)\n * @param {string} [params.group_by] - Group tasks by nodes or parent/child relationships (options: nodes, parents, none)\n * @param {string} [params.timeout] - Explicit operation timeout\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nTasksApi.prototype.list = function tasksListApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_tasks';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\nmodule.exports = TasksApi;","map":{"version":3,"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","parentTaskId","waitForCompletion","errorTrace","filterPath","groupBy","TasksApi","transport","ConfigurationError","prototype","cancel","tasksCancelApi","params","options","callback","method","body","taskId","task_id","querystring","path","encodeURIComponent","request","get","tasksGetApi","err","list","tasksListApi","module","exports"],"sources":["C:/search/vue-search/node_modules/@opensearch-project/opensearch/api/api/tasks.js"],"sourcesContent":["/*\n * Copyright OpenSearch Contributors\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n'use strict';\n\n/* eslint camelcase: 0 */\n/* eslint no-unused-vars: 0 */\n\n/** @namespace API-Tasks */\n\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils');\nconst acceptedQuerystring = [\n  'nodes',\n  'actions',\n  'parent_task_id',\n  'wait_for_completion',\n  'pretty',\n  'human',\n  'error_trace',\n  'source',\n  'filter_path',\n  'timeout',\n  'detailed',\n  'group_by',\n];\nconst snakeCase = {\n  parentTaskId: 'parent_task_id',\n  waitForCompletion: 'wait_for_completion',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  groupBy: 'group_by',\n};\n\nfunction TasksApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n/**\n * Cancels a task, if it can be cancelled through an API.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/tasks/#task-canceling OpenSearch - Task Cancelling}\n *\n * @memberOf API-Tasks\n *\n * @param {Object} params\n * @param {string} [params.task_id] - Cancel the task with specified task id (node_id:task_number)\n * @param {string} [params.nodes] - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {string} [params.actions] - A comma-separated list of actions that should be cancelled. Leave empty to cancel all.\n * @param {string} [params.parent_task_id] - Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.\n * @param {boolean} [params.wait_for_completion] - Should the request block until the cancellation of the task and its descendant tasks is completed. Defaults to false\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nTasksApi.prototype.cancel = function tasksCancelApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, taskId, task_id, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if ((task_id || taskId) != null) {\n    if (method == null) method = 'POST';\n    path = '/' + '_tasks' + '/' + encodeURIComponent(task_id || taskId) + '/' + '_cancel';\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + '_tasks' + '/' + '_cancel';\n  }\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Returns information about a task.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/tasks OpenSearch - Tasks}\n *\n * @memberOf API-Tasks\n *\n * @param {Object} params\n * @param {string} [params.task_id] - Return the task with specified id (node_id:task_number)\n * @param {boolean} [params.wait_for_completion] - Wait for the matching tasks to complete (default: false)\n * @param {string} [params.timeout] - Explicit operation timeoutompletion] - Should the request block until the cancellation of the task and its descendant tasks is completed. Defaults to false\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nTasksApi.prototype.get = function tasksGetApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  // check required parameters\n  if (params.task_id == null && params.taskId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: task_id or taskId');\n    return handleError(err, callback);\n  }\n\n  let { method, body, taskId, task_id, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_tasks' + '/' + encodeURIComponent(task_id || taskId);\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\n/**\n * Returns a list of tasks.\n * <br/> See Also: {@link https://opensearch.org/docs/latest/api-reference/tasks OpenSearch - Tasks}\n *\n * @memberOf API-Tasks\n *\n * @param {Object} params\n * @param {string} [params.nodes] - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n * @param {string} [params.actions] - A comma-separated list of actions that should be returned. Leave empty to return all.\n * @param {boolean} [params.detailed] - Return detailed task information (default: false)\n * @param {string} [params.parent_task_id] - Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.\n * @param {boolean} [params.wait_for_completion] - Wait for the matching tasks to complete (default: false)\n * @param {string} [params.group_by] - Group tasks by nodes or parent/child relationships (options: nodes, parents, none)\n * @param {string} [params.timeout] - Explicit operation timeout\n *\n * @param {Object} options - Options for {@link Transport#request}\n * @param {function} callback - Callback that handles errors and response\n *\n * @returns {{abort: function(), then: function(), catch: function()}|Promise<never>|*}\n */\nTasksApi.prototype.list = function tasksListApi(params, options, callback) {\n  [params, options, callback] = normalizeArguments(params, options, callback);\n\n  let { method, body, ...querystring } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_tasks';\n\n  // build request object\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring,\n  };\n\n  return this.transport.request(request, options, callback);\n};\n\nmodule.exports = TasksApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}