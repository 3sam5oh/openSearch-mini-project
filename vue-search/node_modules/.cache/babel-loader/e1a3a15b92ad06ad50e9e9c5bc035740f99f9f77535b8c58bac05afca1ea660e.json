{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: \"SearchMain\",\n  data() {\n    return {\n      searchQuery: '',\n      synonyms: []\n    };\n  },\n  methods: {\n    async fetchSynonyms() {\n      const query = this.searchQuery.trim();\n      if (query.length > 0) {\n        try {\n          const response = await axios.get(`/api/v1/search/encyc.json`, {\n            params: {\n              query\n            },\n            headers: {\n              'X-Naver-Client-Id': 'YOUR_CLIENT_ID',\n              'X-Naver-Client-Secret': 'YOUR_CLIENT_SECRET'\n            }\n          });\n          this.synonyms = response.data.items.map(item => item.title);\n        } catch (error) {\n          console.error('Error fetching synonyms:', error);\n          this.synonyms = [];\n        }\n      } else {\n        this.synonyms = [];\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","searchQuery","synonyms","methods","fetchSynonyms","query","trim","length","response","get","params","headers","items","map","item","title","error","console"],"sources":["C:\\search\\vue-search\\src\\views\\SearchMain.vue"],"sourcesContent":["<template>\r\n    <div class=\"wrap\">\r\n        <!-- 헤더 -->\r\n        <header class=\"header\">\r\n            <div class=\"search-container\">\r\n                <input type=\"search\" placeholder=\"검색어 입력\" v-model=\"searchQuery\" @input=\"fetchSynonyms\" />\r\n            </div>\r\n        </header>\r\n\r\n        <!-- 내용 -->\r\n        <div class=\"content\">\r\n            <div class=\"context\">\r\n                <div>\r\n                    <p>검색어: {{ searchQuery }}</p>\r\n                    <p v-if=\"synonyms.length\">동의어 제안: {{ synonyms.join(', ') }}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    name: \"SearchMain\",\r\n    data() {\r\n        return {\r\n            searchQuery: '',\r\n            synonyms: []\r\n        };\r\n    },\r\n    methods: {\r\n        async fetchSynonyms() {\r\n            const query = this.searchQuery.trim();\r\n            if (query.length > 0) {\r\n                try {\r\n                    const response = await axios.get(`/api/v1/search/encyc.json`, {\r\n                        params: { query },\r\n                        headers: {\r\n                            'X-Naver-Client-Id': 'YOUR_CLIENT_ID',\r\n                            'X-Naver-Client-Secret': 'YOUR_CLIENT_SECRET'\r\n                        }\r\n                    });\r\n                    this.synonyms = response.data.items.map(item => item.title);\r\n                } catch (error) {\r\n                    console.error('Error fetching synonyms:', error);\r\n                    this.synonyms = [];\r\n                }\r\n            } else {\r\n                this.synonyms = [];\r\n            }\r\n        }\r\n    }\r\n};\r\n</script>\r\n"],"mappings":"AAsBA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACXC,IAAI,EAAE,YAAY;EAClBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,WAAW,EAAE,EAAE;MACfC,QAAQ,EAAE;IACd,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACL,MAAMC,aAAaA,CAAA,EAAG;MAClB,MAAMC,KAAI,GAAI,IAAI,CAACJ,WAAW,CAACK,IAAI,CAAC,CAAC;MACrC,IAAID,KAAK,CAACE,MAAK,GAAI,CAAC,EAAE;QAClB,IAAI;UACA,MAAMC,QAAO,GAAI,MAAMV,KAAK,CAACW,GAAG,CAAC,2BAA2B,EAAE;YAC1DC,MAAM,EAAE;cAAEL;YAAM,CAAC;YACjBM,OAAO,EAAE;cACL,mBAAmB,EAAE,gBAAgB;cACrC,uBAAuB,EAAE;YAC7B;UACJ,CAAC,CAAC;UACF,IAAI,CAACT,QAAO,GAAIM,QAAQ,CAACR,IAAI,CAACY,KAAK,CAACC,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACC,KAAK,CAAC;QAC/D,EAAE,OAAOC,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;UAChD,IAAI,CAACd,QAAO,GAAI,EAAE;QACtB;MACJ,OAAO;QACH,IAAI,CAACA,QAAO,GAAI,EAAE;MACtB;IACJ;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}